This is the main reference page for the WoW UI Lua API available to user Macros and AddOns. This is the API available during normal game play. See also WoW Glue API.
Introduction


The World of Warcraft API, or WoW API, is a set of Lua functions and facilities provided by the Blizzard WoW Client, to allow interaction with the World of Warcraft and its user interface. The list below is incomplete, and kept up to date through user contributions. See also the an automatically-generated exhaustive list of all API functions present in the latest live client.


For beginners, WoW AddOn contains a number of very informative sources to help get you started. You can also examine the existing UI code to find examples of how the various functions are used by the default UI. Discuss any large-scale changes on the discussion page.
GameSpot Expert Reviews
World Of Warcraft: Dragonflight Review - Who Says You Can't Go Home?
World Of Warcraft: Dragonflight Review - Who Says You Can't Go Home?


07 December 2022
World of Warcraft: Battle For Azeroth - Come One, Come All
World of Warcraft: Battle For Azeroth - Come One, Come All


08 October 2018
World of Warcraft: Legion Review
World of Warcraft: Legion Review


27 September 2016
Reference


Global API functions for WoW in Lua.


        API types - variable value types, used here as parameters and return values.


If you're contributing documentation, please read How to edit API pages.


Function names can be prefixed with the following tags, see API notation and conventions:


        PROTECTED - can only be called from secure code. See Protected Functions.
        NOCOMBAT - can only be called from secure code while out of combat.
        HW - may only be called in response to a hardware event, like from OnClick handlers.
        UI - is implemented in Lua in FrameXML, but was important enough to appear here.
        DEPRECATED - is planned to no longer be used, and more than likely removed in future version.
        REMOVED - was removed from the API. should be moved from here to Removed Functions.


Calling functions via macro or command line:


/run BNSetMatureLanguageFilter(true)
/run local x=GetAccountExpansionLevel(); SendChatMessage(x)


Account


        GetAccountExpansionLevel() - Returns registered expansion. (0=WoW, 1=BC, 2=WotLK, 3=Cata, 4=Mists, 5=Warlords, 6=Legion, 7=BfA, 8=Shadowlands)


These functions only return meaningful values on Asian realms; all three relate to the play time limitation system.


        GetBillingTimeRested() - returns the time spent logged in current billing unit.
        PartialPlayTime() - returns 1 if the player is currently "tired": reduced XP, loot.
        NoPlayTime() - returns 1 if the player is currently "unhealthy": no XP, loot.


Achievement


These functions are only available in Patch 3.0


        AddTrackedAchievement(achievementId) - Add an achievement to tracking.
        CanShowAchievementUI() - Returns if the AchievementUI can be displayed
        ClearAchievementComparisonUnit() - Remove the unit being compared.
        GetAchievementCategory(achievementID) - Return the category number of the requested achievement.
        GetAchievementComparisonInfo(achievementID, comparisonNum) - Returns status of achievement for comparison player.
        GetAchievementCriteriaInfo(achievementID, criteriaIndex) - Returns information about the requested criteria.
        GetAchievementCriteriaInfoByID(achievementID, criteriaID) - Returns information about the requested criteria. (added 5.0.4)
        GetAchievementInfo(achievementID) or (category, offset) - Returns information about the requested Achievement.
        GetAchievementInfoFromCriteria(id) - Returns information about the requested Achievement.
        GetAchievementLink(achievementID) - Returns a achievementLink for the specified Achievement.
        GetAchievementNumCriteria(achievementID) - Return the number of criteria the requested Achievement has.
        GetAchievementNumRewards(achievementID) - Return the number of rewards the requested Achievement has.
        GetCategoryInfo(category) - Return information about the requested category
        GetCategoryList() - Returns the list of Achievement categories.
        GetCategoryNumAchievements(category) - Return the total Achievements and number completed for the specific category.
        GetComparisonAchievementPoints() - Return the total number of achievement points the comparison unit has earned.
        GetComparisonCategoryNumAchievements(achievementID)
        GetComparisonStatistic(achievementID) - Return the value of the requested statistic for the comparison player.
        GetLatestCompletedAchievements() - Return the ID's of the last 5 completed Achievements.
        GetLatestCompletedComparisonAchievements()
        GetLatestUpdatedComparisonStats()
        GetLatestUpdatedStats() - Return the ID's of the last 5 updated Statistics.
        GetNextAchievement(achievementID)
        GetNumComparisonCompletedAchievements()
        GetNumCompletedAchievements([guildOnly]) - Returns total and completed number of achievements, or only guild.
        GetPreviousAchievement(achievementID) - Return previous related achievements.
        GetStatistic(achievementID) - Return the value of the requested statistic.
        GetStatisticsCategoryList() - Returns the list of Statistic categories.
        GetTotalAchievementPoints([guildOnly]) - Return the total, or only guild, achievement points earned.
        GetTrackedAchievements() - Return the AchievementID of the currently tracked achievements
        GetNumTrackedAchievements() - Return the total number of the currently tracked achievements
        RemoveTrackedAchievement(achievementID) - Stops an achievement from being tracked
        SetAchievementComparisonUnit(unitId) - Set the unit to be compared to.


Action


These functions are those which operate with the action buttons. See #Activity section for general player actions.


        PROTECTED UI ActionButtonDown(id) - Press the specified action button. (protected 2.0)
        PROTECTED UI ActionButtonUp(id) - Release the specified action button. (protected 2.0)
        ActionHasRange(slot) - Determine if the specified action is a range restriction [1 if yes, nil if no]
        UI BonusActionButtonDown - Trigger the specified bonus(pet or minion) action button.
        UI BonusActionButtonUp - Release the specified bonus(pet or minion) action button.
        PROTECTED CameraOrSelectOrMoveStart() - Begin "Left click" in the 3D world. (protected 1.10)
        PROTECTED CameraOrSelectOrMoveStop([stickyFlag]) - End "Left click" in the 3D world. (protected 1.10)
        NOCOMBAT ChangeActionBarPage(page) - Changes the current action bar page.
        GetActionBarPage() - Return the current action bar page. CURRENT_ACTIONBAR_PAGE is obsolete.
        GetActionBarToggles() - Return the toggles for each action bar.
        GetActionCooldown(slot) - This returns the cooldown values of the specified action..
        GetActionCount(slot) - Get the count (bandage/potion/etc) for an action, returns 0 if none or not applicable.
        GetActionInfo(slot) - Returns type, id, subtype.
        GetActionText(slot) - Get the text label (macros, etc) for an action, returns nil if none.
        GetActionTexture(slot) - Gets the texture path for the specified action.
        GetBonusBarOffset() - Determine which page of bonus actions to show.
        GetMouseButtonClicked() - Returns the name of the button that triggered a mouse down/up/click/doubleclick event. (added 2.0.3)
        GetMultiCastBarOffset() - Returns the page offset of the multicast action IDs (added 3.2)
        GetPossessInfo(index) - Returns texture, name, enabled.
        HasAction(slot) - Returns 1 if the player has an action in the specified slot, nil otherwise.
        IsActionInRange(slot,[unit]) - Test if an action is in range (1=yes, 0=no, nil=not applicable).
        IsAttackAction(slot) - Return 1 if an action is an 'attack' action (flashes during combat), nil otherwise.
        IsAutoRepeatAction(slot) - Return 1 if an action is auto-repeating, nil otherwise.
        IsCurrentAction(slot) - Return 1 if an action is the one currently underway, nil otherwise.
        IsConsumableAction(slot) - Return 1 if an action is consumable (i.e. has a count), nil otherwise.
        IsEquippedAction(slot) - Return 1 if an action is equipped (i.e. connected to an item that must be equipped), nil otherwise.
        IsUsableAction(slot) - Return 1 if an action can be used at present, nil otherwise.
        PetHasActionBar() - Determine if player has a pet with an action bar.
        NOCOMBAT PickupAction(slot) - Drags an action out of the specified quickbar slot and holds it on the cursor.
        NOCOMBAT PickupPetAction(slot) - Drags an action from the specified pet action bar slot into the cursor.
        PlaceAction(slot) - Drops an action from the cursor into the specified quickbar slot.
        SetActionBarToggles(show1,show2,show3,show4[, alwaysShow]) - Set show toggle for each action bar - 'alwaysShow' (added 1.12)
        StopAttack() - Turns off auto-attack, if currently active. Has no effect is the player does not currently have auto-attack active.
        PROTECTED TurnOrActionStart() - Begin "Right Click" in the 3D world. (protected 1.10)
        PROTECTED TurnOrActionStop() - End "Right Click" in the 3D world. (protected 1.10)
        PROTECTED UseAction(slot[, checkCursor[, onSelf]]) - This instructs the interface to use the action associated with the specified ID, optionally on the player, regardless of target. (protected 2.0)


Activity


These functions make the player do something, and which aren't covered elsewhere and aren't simply confirmation steps.


        AcceptDuel() - The player accepts the challenge to duel.
        PROTECTED AttackTarget() - Attacks the targetted unit.
        CancelDuel() - Refuse the invitation to fight a duel.
        CancelLogout() - Cancels the logout timer, from camping or quitting.
        ClearTutorials()
        CancelSummon() - Rejects a summon request.
        ConfirmSummon() - Accepts a summon request.
        PROTECTED DescendStop() - The player stops descending, while swimming or flying. (added 2.1)
        Dismount() - The player dismounts the current mount. (added 2.0.3)
        FlagTutorial("tutorial")
        ForceQuit() - Instantly quits the game, bypassing the timer.
        GetPVPTimer() - Returns the amount of time until your PvP flag fades.
        GetSummonConfirmAreaName() - Returns the name of the area you're being summoned to.
        GetSummonConfirmSummoner() - Returns the name of the player summoning you.
        GetSummonConfirmTimeLeft() - Returns the amount of time left before the pending summon expires.
        Logout - Logs the user out of the game.
        Quit - Quits the game, not the Lua script.
        RandomRoll(low, high) - Does a random roll between the two values.
        SetPVP(arg1) - Sets the players PVP mode (1 to enable, nil to toggle off eventually)
        PROTECTED SitStandOrDescendStart() - The player sits, stands, or descends (added 2.1)
        PROTECTED StartDuel("name") - Challenge someone to a duel, by name. (protected 2.0)
        TogglePVP() - Toggles PVP status
        ToggleSheath() - Toggles sheathed or unsheathed weapons.
        UseSoulstone() - Use an active soulstone to resurrect yourself after death. Also works for Shamans with Reincarnation available.


AddOn


        DisableAddOn(index or "AddOnName") - Disable the specified AddOn for subsequent sessions.
        DisableAllAddOns() - Disable all AddOns for subsequent sessions.
        EnableAddOn(index or "AddOnName") - Enable the specified AddOn for subsequent sessions.
        EnableAllAddOns() - Enable all AddOns for subsequent sessions.
        GetAddOnDependencies(index or "AddOnName") - Get dependency list for an AddOn.
        GetAddOnInfo(index or "AddOnName") - Get information about an AddOn.
        GetAddOnMetadata(index or "name", "variable") - Retrieve metadata from addon's TOC file.
        GetNumAddOns() - Get the number of user supplied AddOns.
        IsAddOnLoaded(index or "AddOnName") - Returns true if the specified AddOn is loaded.
        IsAddOnLoadOnDemand(index or "AddOnName") - Test whether an AddOn is load-on-demand.
        LoadAddOn(index or "AddOnName") - Request loading of a Load-On-Demand AddOn.
        ResetDisabledAddOns()


Archaeology


Functions for the Archaeology Profession. Added in 4.0.1 Cataclysm.


        CanSolveArtifact()
        GetArtifactInfoByRace(raceIndex, projectIndex)
        GetArtifactProgress()
        GetNumArtifactsByRace(index)
        GetSelectedArtifactInfo()
        IsArtifactCompletionHistoryAvailable() - Returns 1 if the player has completed at least one artifact, otherwise nil;
        ItemAddedToArtifact(index) - Returns true if an item is in the indicated artifact slot, otherwise false.
        RemoveItemFromArtifact(SlotID)
        RequestArtifactCompletionHistory()
        SocketItemToArtifact(SlotID)


Arena


        AcceptArenaTeam() - Accepts a pending Arena team invitation.
        ArenaTeamInviteByName(teamIndex, playerName) - Invites the specified player to the specified arena team.
        ArenaTeamSetLeaderByName(teamIndex, playerName) - Sets new Team Leader to the specified arena team.
        ArenaTeamLeave(teamIndex) - Leaves the specified arena team.
        ArenaTeamRoster(teamIndex) - Sends a request to the server to request the most recent information on a specific Arena Team that you are in.
        ArenaTeamUninviteByName(teamIndex, playerName) - Removes the specified played from the specified arena team.
        ArenaTeamDisband(teamIndex) - Disbands the arena team without any warning! Requires you to be the leader of the team. (added 2.1.3)
        DeclineArenaTeam() - Declines a pending Arena team invitation.
        GetArenaTeam(teamIndex) - Returns information regarding the players arena team, nil if the player is not in the passed team
        GetArenaTeamGdfInfo() - (added 3.0.8)
        GetArenaTeamRosterInfo(teamIndex, playerIndex) - Returns information regarding a player from the specified team. This requires a call to #ArenaTeamRoster you only need to do this when the player logins in, UI reloads will not effect the return.
        GetBattlefieldTeamInfo(index) - Gets info about a registered Arena Team at the end of an arena match.
        GetCurrentArenaSeason() - Gets the current Arena season.
        GetInspectArenaTeamData(index) - Retrieves all the data associated with the inspected player's arena team located at index.
        GetNumArenaTeamMembers(teamIndex[, showOffline]) - Gets the number of arena team members. This requires a call to #ArenaTeamRoster you only need to do this when the player logins in, UI reloads will not effect the return.
        GetPreviousArenaSeason() - Gets the previous Arena season.
        IsActiveBattlefieldArena() - Returns true if in an Arena Match, also Returns true for the second argument if it's a registered match.
        IsArenaTeamCaptain(teamIndex) - Returns a value based on whether the player is the arena team captain.
        IsInArenaTeam() - Returns true if you are a member of an arena team.


Auction


        CalculateAuctionDeposit(runTime, stackSize, numStacks) - Returns the required deposit for the current selling item given the specified duration (1=12h, 2=24h, 3=48h).
        CanCancelAuction(index) - Returns 1 if auction can be canceled.
        CancelSell() - Clears the auction house listing queue, not creating any additional auctions. (added 3.3.3)
        CanSendAuctionQuery() - Return 1 if auction search button would be active, nil otherwise.
        CancelAuction(index) - Cancel the specified auction (on the "owner" list).
        ClickAuctionSellItemButton() - Puts the currently 'picked up' item into the 'create auction' slot.
        CloseAuctionHouse() - Will close the AuctionFrame if opened.
        DEPRECATED GetAuctionHouseDepositRate() - Returns the deposit rate (percentage) for the currently open auction house. (obsolete by '#CalculateAuctionDeposit')
        GetAuctionInvTypes(classIndex, subclassIndex) - Returns types of subcategories items.
        GetAuctionItemClasses() - Returns major auction item categories.
        GetAuctionItemInfo("type", index) - Returns details about the specified auction item.
        GetAuctionItemLink("type", index) - Returns an itemLink for the specified auction item.
        GetAuctionItemSubClasses(classIndex) - Returns subcategories in the nth auction category.
        GetAuctionItemTimeLeft("type", index) - Returns the time left status of the specified auction item.
        GetAuctionSellItemInfo() - Returns information about the current selling item (or nil if none selected).
        DEPRECATED GetBidderAuctionItems([page]) - Returns details about an auction item on which the user is bidding (obsolete by '#CalculateAuctionDeposit("bidder", item)')
        GetNumAuctionItems("type") - Returns the size of the specified auction item list.
        DEPRECATED GetOwnerAuctionItems([page]) - Returns details about an auction item of which the user is the owner (obsolete by '#GetAuctionItemInfo("owner", item)')
        GetSelectedAuctionItem("type") - Returns the index (1-50) of the selected auction item or 0 if none is selected.
        IsAuctionSortReversed("type", "sort") - Returns 1 if the specified auction list and sort is reversed, nil otherwise.
        PlaceAuctionBid("type", index, bid) - Place a bid on the selected auction item.
        QueryAuctionItems("name", minLevel, maxLevel, invTypeIndex, classIndex, subclassIndex, page, isUsable, qualityIndex) - Performs a search of the auction house with the specified characteristics.
        SetAuctionsTabShowing(showing) - Sets whether auction-related events should be delivered to the client. (added 3.3.3)
        SetSelectedAuctionItem("type", index) - Selects a specific item in the auction house.
        SortAuctionItems("type", "sort") - Request that the specified auction list be sorted by a specific column.
        StartAuction(minBid, buyoutPrice, runTime, stackSize, numStacks) - Starts the auction you have created in the Create Auction panel.
        UI AuctionFrameAuctions.duration - Set the amount of time the auction will run for in minutes.


Bank


        BankButtonIDToInvSlotID(buttonID, isBag) - Returns the ID number of a bank button or bag in terms of inventory slot ID.
        CloseBankFrame() - Close the bank frame if it's open.
        GetBankSlotCost(numSlots) - Returns the cost of the next bank slot.
        GetNumBankSlots() - Returns total purchased bank bag slots, and a flag indicating if it's full.
        PurchaseSlot() - Buys another bank slot if available.


Barber Shop


These functions were introduced in 3.0.2.


        ApplyBarberShopStyle() - Purchase and apply the cosmetic changes.
        BarberShopReset() - Reset any changes made in the Barber Shop.
        CancelBarberShop() - Exit the Barber Shop chair.
        GetBarberShopStyleInfo(id) - Returns information about the currently selected style.
        GetBarberShopTotalCost() - Returns the total costs of the cosmetic changes.
        GetFacialHairCustomization() - Returns the type of facial hair customization available to the character.
        GetHairCustomization() - Returns the type of haircut customization available to the character.
        SetNextBarberShopStyle(id[, reverse]) - Alters style selection in a particular category.


Battlefield


        AcceptAreaSpiritHeal() - Accept a spirit heal.
        AcceptBattlefieldPort(index[, acceptFlag]) - Accept or reject an offered battlefield port.
        CancelAreaSpiritHeal() - Cancel a spirit heal.
        CanJoinBattlefieldAsGroup() - returns nil if the player can not do a group join for a battlefield.
        CheckSpiritHealerDist() - Return true if you are in range with spirit healer while dead.
        GetAreaSpiritHealerTime() - Returns the time left until the next resurrection by the Sprit Guide.
        GetBattlefieldEstimatedWaitTime(index) - Get the estimated wait for entry into the battlefield.
        GetBattlefieldFlagPosition(index) - Get the map position and texture of the flag.
        GetBattlefieldInstanceExpiration() - Get shutdown timer for the battlefield instance.
        GetBattlefieldInstanceRunTime() - In milliseconds, the time since battleground started (seems to be queried from server because it is not in sync with time()).
        GetBattlefieldMapIconScale() - Scale of the landmark icons on the battlefield minimap.
        GetBattlefieldPortExpiration(index) - Get the remaining seconds before the battlefield port expires.
        GetBattlefieldPosition(index) - Get the map position and name of a player in the battleground not in your raid.
        GetBattlefieldScore(index) - Get score information about a player.
        GetBattlefieldStatData(playerIndex, slotIndex) - Get information for a player from a column thats specific to a battleground (like Warsong Gulch flag captures).
        GetBattlefieldStatInfo(index) - Get the battleground specific column for the score board.
        GetBattlefieldStatus(index) - Get the battlefield's current status.
        GetBattlefieldTimeWaited(index) - Get time waited in queue in milliseconds.
        GetBattlefieldWinner() - Get the battlefields winner.
        GetBattlegroundInfo() - Returns information about a battleground type.
        GetNumBattlefieldFlagPositions() - Get the number of flag positions available from GetBattlefieldFlagPosition().
        GetNumBattlefieldPositions() - Get the number of positions available from GetBattlefieldPosition().
        GetNumBattlefieldScores() - Returns the number of scores(players) listed in the battlefield scoreboard.
        GetNumBattlefieldStats() - Get the number of battleground specific columns.
        GetNumWorldStateUI() - Get the number of WorldState UI's.
        REMOVED GetWintergraspWaitTime() - Get the number of seconds until the next Wintergrasp battle. Returns nil if battle is in progress.
        GetWorldStateUIInfo(i) - Get score and flag status within a battlefield.
        IsPVPTimerRunning()
        JoinBattlefield(index[, joinAs]) - Queue for a battleground either solo or as a group.
        LeaveBattlefield() - Leave the current battlefield
        ReportPlayerIsPVPAFK("unit") - Reports the specified player as AFK in a battleground.
        RequestBattlefieldPositions() - Request new data for GetBattlefieldPosition().
        RequestBattlefieldScoreData() - Request new data for GetBattlefieldScore().
        RequestBattlegroundInstanceInfo(index) - Requests data about the available instances of a battleground.
        SetBattlefieldScoreFaction([faction]) - Set the faction to show on the battlefield scoreboard.


Binding


        GetBinding(index) - Get action and key bindings for that index.
        GetBindingAction("KEY" [,checkOverride]) - Get the action bound to that key.
        GetBindingKey("command") - Get the key(s) bound to that action.
        UI GetBindingText("key", "prefix", returnAbbr) - Gets the string value for the key.
        GetCurrentBindingSet() - Queries if current set of key bindings is character or account specific
        GetNumBindings() - Get total number key bindings and headers.
        LoadBindings(which) - Loads default, account or character specific key binding set into memory from disk.
        RunBinding("command"[, "up"]) - Executes the key binding named "command"
        SaveBindings(which) - Saves account or character specific key bindings from memory to disk.
        NOCOMBAT SetBinding("key"[, "command"[, mode]]) - Sets or unsets key bindings. (2.0 - Can not be used in combat.)
        NOCOMBAT SetBindingSpell("KEY", "Spell Name") - Set a key binding directly to a spell, uses the same spell name syntax as /cast.
        NOCOMBAT SetBindingClick("KEY", "ButtonName" [,"mouseButton"]) - Set a key binding directly to a Button object. The click sends a mouse down when the key is pressed, and a mouse up when it is released.
        NOCOMBAT SetBindingItem("KEY", "itemname")
        NOCOMBAT SetBindingMacro("KEY", "macroname"|macroid)
        SetConsoleKey("key") - Sets the console key (normally ~ ).
        NOCOMBAT SetOverrideBinding(owner, isPriority, "KEY" [,"COMMAND"]) - Set (or clear) an override key binding.
        NOCOMBAT SetOverrideBindingSpell(owner, isPriority, "KEY", "spellname")
        NOCOMBAT SetOverrideBindingClick(owner, isPriority, "key", "buttonName" [, "mouseClick"]) - Sets an override binding that acts like a mouse click on a button.
        NOCOMBAT SetOverrideBindingItem(owner, isPriority, "KEY", "itemname")
        NOCOMBAT SetOverrideBindingMacro(owner, isPriority, "KEY", "macroname"|macroid)
        NOCOMBAT ClearOverrideBindings(owner) - Reset all overrides belonging to an owner.
        SetMouselookOverrideBinding("KEY" [,"COMMAND"])
        IsModifierKeyDown() - equivalent to (IsShiftKeyDown() or IsControlKeyDown() or IsAltKeyDown()).
        IsModifiedClick("action") - Returns 1 if the keys for the specified action are down, nil otherwise.
        IsMouseButtonDown([button or "button"])


Buff / Debuff


        PROTECTED CancelUnitBuff("unit", index or "spell" [,"filter" or "rank"]) - Removes a specific buff from the player.
        PROTECTED CancelShapeshiftForm() - Cancels a druid's shapeshift form buff.
        PROTECTED CancelItemTempEnchantment(weaponHand) - Cancels a temporary weapon enchant on weaponHand (1 for Main hand, 2 for Off hand).
        GetWeaponEnchantInfo() - Return information about main and offhand weapon enchantments.
        UnitAura("unit", index or "buffName" [,filter]) - Returns information about a buff/debuff of a certain unit.
        UnitBuff("unit", index or "buffName" [,castable]) - Retrieves info about a buff of a certain unit.
        UnitDebuff("unit", index or "buffName" [,removable]) - Retrieves info about a debuff of a certain unit.


Calendar


        HW CalendarAddEvent() - Saves the selected event (new events only, requires hardware input to call)
        CalendarCanAddEvent() - Returns true if player can add an event
        CalendarCanSendInvite() - Returns true if player can send invites
        CalendarCloseEvent() - Closes the selected event without saving it
        CalendarContextDeselectEvent() - (added 3.0.8)
        CalendarContextEventCanComplain(monthOffset, day, eventIndex) - Returns true if player can report the event as spam
        CalendarContextEventCanEdit(monthOffset, day, eventIndex) - Returns true if player can edit the event
        CalendarContextEventClipboard()
        CalendarContextEventComplain(monthOffset, day, eventIndex) - Reports the event as spam
        CalendarContextEventCopy(monthOffset, day, eventIndex) - Copies the event to the clipboard
        CalendarContextEventGetCalendarType()
        CalendarContextEventPaste(monthOffset, day) - Pastes the clipboard event to the date
        CalendarContextEventRemove(monthOffset, day, eventIndex) - Deletes the event
        CalendarContextEventSignUp()
        CalendarContextGetEventIndex() - (added 3.0.8)
        CalendarContextInviteAvailable(monthOffset, day, eventIndex) - Accepts the invitation to the event
        CalendarContextInviteDecline(monthOffset, day, eventIndex) - Declines the invitation to the event
        CalendarContextInviteIsPending(monthOffset, day, eventIndex) - Returns true if the player hasn't responded to the event invite
        CalendarContextInviteTentative()
        CalendarContextInviteType
        CalendarContextInviteModeratorStatus(monthOffset, day, eventIndex)
        CalendarContextInviteRemove(monthOffset, day, eventIndex) - Removes the event from the calendar
        CalendarContextInviteStatus(monthOffset, day, eventIndex) - returns inviteStatus
        CalendarContextSelectEvent(monthOffset, day, eventIndex) - (added 3.0.8)
        CalendarDefaultGuildFilter() - returns minLevel, maxLevel
        CalendarEventAvailable() - Accepts the inviation to the currently open event
        CalendarEventCanEdit() - Returns true if the event can be edited
        CalendarEventCanModerate
        CalendarEventClearAutoApprove() - Turns off automatic confirmations
        CalendarEventClearLocked() - Unlocks the event
        CalendarEventClearModerator()
        CalendarEventDecline() - Declines the invitation to the currently open event
        CalendarEventGetCalendarType()
        CalendarEventGetInvite(inviteeIndex) - Returns status information for an invitee for the currently opened event
        CalendarEventGetInviteResponseTime(inviteIndex)
        CalendarEventGetInviteSortCriterion() - returns criterion, reverse
        CalendarEventGetNumInvites() - Returns the number of invitees for the currently opened event
        CalendarEventGetRepeatOptions() - Returns opt1, opt2
        CalendarEventGetSelectedInvite() - returns inviteIndex
        CalendarEventGetStatusOptions() - Returns ?
        CalendarEventGetTextures(eventType) - Returns title1, tex1, expLvl1, title2, tex2, expLvl2, ...
        CalendarEventGetTypes() - Returns name1, name2, ...
        CalendarEventHasPendingInvite() - Returns true if the player has an unanswered invitation to the currently selected event
        CalendarEventHaveSettingsChanged() - Returns true if the currently open event has been modified
        CalendarEventInvite("Player") - Invite player to currently selected event
        CalendarEventIsModerator()
        CalendarEventRemoveInvite(inviteIndex)
        CalendarEventSelectInvite(inviteIndex)
        CalendarEventSetAutoApprove()
        CalendarEventSetDate(month, day, year)
        CalendarEventSetDescription(description)
        CalendarEventSetLocked()
        CalendarEventSetLockoutDate(lockoutDate)
        CalendarEventSetLockoutTime(lockoutTime)
        CalendarEventSetModerator(index)
        CalendarEventSetRepeatOption(repeatoption)
        CalendarEventSetSize
        CalendarEventSetStatus(index, status) - Sets the invitation status of a player to the current event
        CalendarEventSetTextureID(textureIndex)
        CalendarEventSetTime(hour, minute)
        CalendarEventSetTitle(title)
        CalendarEventSetType(type)
        CalendarEventSignUp()
        CalendarEventSortInvites(criterion)
        CalendarEventTentative()
        CalendarGetAbsMonth() - returns month, year
        CalendarGetDate() - Call this only after PLAYER_ENTERING_WORLD event
        CalendarGetDayEvent(monthOffset, day, eventIndex)
        CalendarGetDayEventSequenceInfo - Retrieve information about the specified event.
        CalendarGetEventIndex() - returns monthOffset, day, index
        CalendarGetEventInfo() - Returns detailed information about an event selected with CalendarOpenEvent()
        CalendarGetFirstPendingInvite(monthOffset, day) - returns eventIndex
        CalendarGetHolidayInfo(monthOffset, day, eventIndex) - Returns Holiday Name, Holiday Description, Calendar Icon
        CalendarGetMaxCreateDate() - returns maxWeekday, maxMonth, maxDay, maxYear
        CalendarGetMaxDate() - returns maxWeekday, maxMonth, maxDay, maxYear
        CalendarGetMinDate() - returns minWeekday, minMonth, minDay, minYear
        CalendarGetMinHistoryDate() - returns minWeekday, minMonth, minDay, minYear
        CalendarGetMonth([monthOffset]) - returns month, year
        CalendarGetMonthNames() - returns a list of the month names
        CalendarGetNumDayEvents(monthOffset[, day])
        CalendarGetNumPendingInvites() - returns count
        CalendarGetRaidInfo (monthOffset, day, eventIndex) - returns name, calendarType, raidID, hour, minute, difficulty
        CalendarGetWeekdayNames() - returns a list of the weekday names
        CalendarIsActionPending() - returns isPending
        CalendarMassInviteArenaTeam(teamType)
        CalendarMassInviteGuild(minLevel, maxLevel, rank)
        CalendarNewEvent() - Creates and selected a new event
        CalendarNewGuildAnnouncement()
        CalendarNewGuildEvent(minLevel, maxLevel, minRank) - Replaces the invite list of the selected new event with the specified guild members
        CalendarOpenEvent(monthOffset, day, eventIndex) - Selects an existing event
        CalendarRemoveEvent() - Removes the selected event from the calendar (invitees only)
        CalendarSetAbsMonth(month, year) - Sets the reference month and year for functions which use a month offset
        CalendarSetMonth(monthOffset)
        CalendarUpdateEvent() - Saves the selected event (existing events only, requires hardware input to call)
        OpenCalendar() - Requests calendar information from the server. Does not open the calendar frame. (added 3.0.8)


Camera


'Mouse Look' refers to holding down the right mouse button and controlling the movement direction. Shifting the view by holding down the 'left' mouse button is not covered by these APIs.


        PROTECTED CameraOrSelectOrMoveStart() - Begin "Left click" in the 3D world. (protected 1.10)
        PROTECTED CameraOrSelectOrMoveStop([stickyFlag]) - End "Left click" in the 3D world. (protected 1.10)
        CameraZoomIn(increment) - Zooms the camera into the viewplane by increment.
        CameraZoomOut(increment) - Zooms the camera out of the viewplane by increment.
        FlipCameraYaw(degrees) - Rotates the camera about the Z-axis by the angle amount specified in degrees.
        IsMouselooking() - Returns 1 if mouselook is currently active, nil otherwise.
        MouselookStart() - Enters mouse look mode; mouse movement is used to adjust movement/facing direction.
        MouselookStop() - Exits mouse look mode; mouse movement is used to move the mouse cursor.
        MoveViewDownStart() - Begins rotating the camera downward.
        MoveViewDownStop() - Stops rotating the camera after #MoveViewDownStart() is called.
        MoveViewInStart() - Begins zooming the camera in.
        MoveViewInStop() - Stops zooming the camera in after #MoveViewInStart() is called.
        MoveViewLeftStart() - Begins rotating the camera to the Left.
        MoveViewLeftStop() - Stops rotating the camera after #MoveViewLeftStart() is called.
        MoveViewOutStart() - Begins zooming the camera out.
        MoveViewOutStop() - Stops zooming the camera out after #MoveViewOutStart() is called.
        MoveViewRightStart() - Begins rotating the camera to the Right.
        MoveViewRightStop() - Stops rotating the camera after #MoveViewRightStart() is called.
        MoveViewUpStart() - Begins rotating the camera upward.
        MoveViewUpStop() - Stops rotating the camera after #MoveViewUpStart() is called.
        PROTECTED PitchDownStart() - Begins pitching the camera Downward.
        PROTECTED PitchDownStop() - Stops pitching the camera after #PitchDownStart() is called.
        PROTECTED PitchUpStart() - Begins pitching the camera Upward.
        PROTECTED PitchUpStop() - Stops pitching the camera after #PitchUpStart() is called.
        NextView() - Cycles forward through the five predefined camera positions.
        PrevView() - Cycles backward through the five predefined camera positions.
        ResetView(index) - Resets the specified (1-5) predefined camera position to its default if it was changed using #SaveView(index).
        SaveView(index) - Replaces the specified (1-5) predefined camera positions with the current camera position.
        SetView(index) - Sets camera position to a specified (1-5) predefined camera position.


Channel


These are chat functions which are specific to channels. Also see the #Chat Window and #Communication sections.


        AddChatWindowChannel(chatFrameIndex, "channel") - Make a chat channel visible in a specific ChatFrame.
        ChannelBan("channel", "name") - Bans a player from the specified channel.
        ChannelInvite("channel", "name") - Invites the specified user to the channel.
        ChannelKick("channel", "name") - Kicks the specified user from the channel.
        ChannelModerator("channel", "name") - Sets the specified player as the channel moderator.
        ChannelMute("channel", "name") - Turns off the specified player's ability to speak in a channel.
        ChannelToggleAnnouncements("channel") - Toggles the channel to display announcements either on or off.
        ChannelUnban("channel", "name") - Unbans a player from a channel.
        ChannelUnmoderator("channel", "name") - Takes the specified user away from the moderator status.
        ChannelUnmute("channel", "name") - Unmutes the specified user from the channel.
        DisplayChannelOwner("channel") - Displays the owner of the specified channel in the default chat.
        DeclineInvite("channel") - Declines an invitation to join a chat channel.
        EnumerateServerChannels() - Retrieves all available server channels (zone dependent).
        GetChannelList() - Retrieves joined channels.
        GetChannelName("channel" or index) - Retrieves the name from a specific channel.
        GetChatWindowChannels(index) - Get the chat channels received by a chat window.
        JoinChannelByName("channel"[, "password"[, frameId]]) - Join the specified chat channel, with optional password, and register for specified frame. (updated 1.9)
        LeaveChannelByName("channel") - Leaves the channel with the specified name.
        ListChannelByName(channelMatch) - Lists members in the given channel to the chat window.
        ListChannels() - Lists all of the channels into the chat window.
        RemoveChatWindowChannel(chatFrameIndex, "channel") - Make a chat channel invisible (hidden) in a specific ChatFrame.
        SendChatMessage("msg",[ "chatType",[ "language",[ "channel"]]]) - Sends a chat message.
        SetChannelOwner("channel", "name") - Sets the channel owner.
        SetChannelPassword("channel", "password") - Changes the password of the current channel.


Character


        AcceptResurrect() - The player accepts the request from another player to resurrect him/herself.
        AcceptXPLoss() - Accept the durability loss to be reborn by a spirit healer. The name is a remnant from when spirit res was an XP loss instead.
        CheckBinderDist() - Check whether the player is close enough to interact with the Hearthstone binder.
        ConfirmBinder() - Confirm the request to set the binding of the player's Hearthstone.
        DeclineResurrect() - Decline the request from another player to resurrect him/herself.
        DestroyTotem(slot)
        GetBindLocation() - Get the name of the location for your Hearthstone.
        GetComboPoints() - Get the current number of combo points.
        GetCorpseRecoveryDelay() - Time left before a player can accept a resurrection
        GetCurrentTitle() - Returns the player's current titleId.
        GetMirrorTimerInfo(id) - returns information about a mirror timer (exhaustion, breath and feign death timers)
        GetMirrorTimerProgress(id) - returns the current value of a mirror timer (exhaustion, breath and feign death timers)
        GetMoney() - Returns an integer value of your held money in copper.
        GetNumTitles() - Returns the maximum titleId
        GetPlayerFacing() - Returns the direction the player is facing in radians ([-R, R] range, 0 is north, R/2 is east). (added 3.1)
        GetPVPDesired() - Returns whether the player has permanently turned on their PvP flag.
        GetReleaseTimeRemaining() - Returns the amount of time left before your ghost is pulled from your body.
        GetResSicknessDuration()
        GetRestState() - Returns information about a player's rest state (saved up experience bonus)
        GetRuneCooldown(id) - Returns cooldown information about a given rune.
        GetRuneCount(slot)
        GetRuneType(id) - Returns the type of rune with the given id.
        GetTimeToWellRested() - Defunct.
        GetTitleName(titleId) - Returns the player's current title name
        GetUnitPitch(UnitID) - Returns the true pitch radians ([-R, R] 0 is level). UnitID restricted to "player".
        GetXPExhaustion() - Returns your character's current rested XP, nil if character is not rested.
        HasFullControl()
        HasSoulstone()
        IsFalling() - Returns 1 if your character is currently plummeting to their doom.
        IsFlying() - Returns 1 if flying, otherwise nil.
        IsFlyableArea() - Returns 1 if it is possible to fly here, nil otherwise.
        IsIndoors() - Returns 1 if you are indoors, otherwise nil. Returns nil for indoor areas where you can still mount.
        IsMounted() - Returns 1 if mounted, otherwise nil
        IsOutdoors() - Returns 1 if you are outdoors, otherwise nil. Returns 1 for indoor areas where you can still mount.
        IsOutOfBounds() - Returns 1 if you fell off the map.
        IsResting() - Returns 1 if your character is currently resting.
        IsStealthed() - Returns 1 if stealthed or shadowmeld, otherwise nil
        IsSwimming() - Returns 1 if your character is currently swimming.
        IsTitleKnown(index) - Returns 1 if the title is valid for the player, otherwise 0.
        IsXPUserDisabled() - Returns 1 if the character has disabled experience gain.
        NotWhileDeadError() - Generates an error message saying you cannot do that while dead.
        ResurrectHasSickness() - Appears to be used when accepting a resurrection will give you resurrection sickessness.
        ResurrectHasTimer() - Does the player have to wait before accepting a resurrection
        ResurrectGetOfferer() - Returns the name of the person offering to resurrect you.
        RetrieveCorpse() - Resurrects when near corpse. e.g., The "Accept" button one sees after running back to your body.
        HW SetCurrentTitle(titleId) - Sets the player's current title id
        TargetTotem() - (added 3.0.8)


Character Statistics


        GetArmorPenetration() - Returns percent of armor ignored by your physical attacks.
        GetAttackPowerForStat(stat, value) - Returns the amount of attack power contributed by a specified amount of a particular stat.
        GetAverageItemLevel() - Returns the player's current iLevel.
        GetBlockChance() - Returns the player's percentage block chance.
        GetCombatRating(ratingID) - Returns the player's combat rating for a particular combat rating. (added 2.0)
        GetCombatRatingBonus(ratingID) - Returns the player's combat rating bonus for a particular combat rating. (added 2.0)
        GetCritChance() - Returns the player's melee critical hit chance
        GetCritChanceFromAgility("unit") - Returns the amount of your critical hit chance contributed by Agility.
        GetDodgeChance() - Returns the player's percentage dodge chance.
        GetExpertise() - Returns main hand and offhand expertise value.
        GetExpertisePercent() - Returns reduction in dodge and parry chances for main hand and offhand attacks, in percent.
        GetLifesteal() - Returns the player's Leech.
        GetManaRegen() - Returns the player's mana regeneration rates.
        GetMastery() - Returns the sum of player's base and rating bonus mastery.
        GetMasteryEffect() - Returns the effect of player's current Mastery.
        GetMaxCombatRatingBonus(lowestRating)
        GetParryChance() - Returns the player's percentage parry chance.
        GetPetSpellBonusDamage
        GetPowerRegen() - Returns normal and combat power regeneration rates
        GetSpellBonusDamage(spellTreeID) - Returns the raw spell damage of the player for a given spell tree.
        GetRangedCritChance() - Returns the players ranged critical strike chance.
        GetSpellBonusHealing() - Returns the raw bonus healing of the player.
        GetSpellCritChance(school) - returns the players critical hit chance with a particular spell school.
        GetShieldBlock()
        GetSpellCritChanceFromIntellect("unit")
        GetSpellPenetration()


Chat Window


These are functions which are specific to chat 'window' management. See also the #Channel and #Communication sections. See Mikk's spiel on chat windows, which may be out of date.


        AddChatWindowChannel(chatFrameIndex, "channel") - Make a chat channel visible in a specific ChatFrame.
        AddChatWindowMessages - Adds a messaging group to the specified chat window.
        ChangeChatColor(channelname,r,g,b) - Update the color for a type of chat message.
        UI ChatFrame:AddChannel(chatFrame, "channelName") - Activate channel in chatFrame.
        UI ChatFrame:AddMessageEventFilter("event", filterFunc) - Add a chat message filtering function (added 2.4)
        UI ChatFrame:GetMessageEventFilters("event") - Retreive the list of chat message filtering functions. (added 2.4)
        UI ChatFrame:OnHyperlinkShow(reference, link, button) - called when the user clicks on a chatlink.
        UI ChatFrame:RemoveMessageEventFilter("event", filterFunc) - Unregister a chat message filtering function (added 2.4)
        GetAutoCompleteResults("text", include, exclude, maxResults[, cursorPosition]) - Returns possible player names matching a given prefix string and specified requirements.
        GetChatTypeIndex(type) - Get the numeric ID of a type of chat message.
        GetChatWindowChannels(index) - Get the chat channels received by a chat window.
        GetChatWindowInfo(index) - Get setup information about a chat window.
        GetChatWindowMessages(index) - Get the chat message types received by a chat window.
        JoinChannelByName("channel"[, "password"[, frameId]]) - Join the specified chat channel, with optional password, and register for specified frame. (updated 1.9)
        LoggingChat(newState) - Gets or sets whether logging chat to Logs\WoWChatLog.txt is enabled.
        LoggingCombat(newState) - Gets or sets whether logging combat to Logs\WoWCombatLog.txt is enabled.
        RemoveChatWindowChannel(chatFrameIndex, "channel") - Make a chat channel invisible (hidden) in a specific ChatFrame.
        RemoveChatWindowMessages(chatFrameIndex,"messageGroup") - Remove a set of chat messages from this window.


These functions get applied after reload ui (index 1 is General and index 2 is Combat Log):


        SetChatWindowAlpha(index,alpha) - Sets the Alpha value(transparency) of ChatFrame<index> (alpha - 0-100)
        SetChatWindowColor(index,r,g,b) - Sets the background color of a a chat window. (r/g/b - 0-255)
        SetChatWindowDocked(index,docked) - Set whether a chat window is docked. (docked - 0/1)
        SetChatWindowLocked(index,locked) - Sets ChatFrame<index> so that it is or is not movable. (locked - 0/1)
        SetChatWindowName(index,"name") - Sets the name of ChatFrame<index> to <"name">.
        SetChatWindowShown(index,shown) - Shows or Hides ChatFrame<index> depending on value of <shown> (shown - 0/1)
        SetChatWindowSize(index,size) - Sets the font size of a chat window. (size - default 14)
        SetChatWindowUninteractable(id, isUninteractable) - (added 3.0.8)


Communication


These are functions communicate with other players. Also see the #Channel and #Chat Window sections.


        DoEmote("emote",["target"]) - Perform a voice emote.
        GetDefaultLanguage("unit") - Returns the default language that the unit is speaking after logon.
        GetLanguageByIndex(index) - Returns the language specified by the index.
        GetNumLanguages() - Returns the number of languages your character can speak. (renamed from 'GetNumLaguages' 2.4)
        GetRegisteredAddonMessagePrefixes(table) - Returns a table, or you can pass in a table, that will be filled in with all prefixes that were registered. (added 4.1)
        IsAddonMessagePrefixRegistered(prefix) - Returns a Boolean if the prefix has been registered. (added 4.1)
        RandomRoll(low, high) - Does a random roll between the two values.
        RegisterAddonMessagePrefix(prefix) - Register the addon prefix to enable the CHAT_MSG_ADDON event. Returns a boolean if successful could fail if it hits the client side limit of 512 prefixes. (added 4.1)
        SendAddonMessage("prefix", "text", "type" [, "player"]) - Sends a message to hidden AddOn channels. (added 1.12)
        SendChatMessage("msg",[ "chatType",[ "language",[ "channel"]]]) - Sends a chat message.


Companion


These functions relate to companions, mounts and non-combat pets. All functions were introduced in 3.0.


        CallCompanion("type", slotid) - Summons a companion.
        DismissCompanion("type") - Dismisses an active companion.
        GetCompanionInfo("type", slotid) - Returns info about a selected companion.
        GetNumCompanions("type") - Get the number of companions of the specified type.
        GetCompanionCooldown("type", index) - Returns cooldown information.
        PickupCompanion("type", index) - Picks up the indexed companion onto the mouse cursor.
        SummonRandomCritter() - Summons a random critter companion. (added 3.3.3)


Container / Bag


These functions manage containers, bags, backpacks. See also #Inventory and #Bank sections.


        ContainerIDToInventoryID(bagID)
        GetBagName(bagID) - Get the name of one of the player's bags.
        GetContainerItemCooldown(bagID, slot)
        GetContainerItemDurability(bag, slot) - Get current and maximum durability of an item in the character's bags.
        GetContainerItemGems(bag, slot) - Returns item IDs of gems inserted into the item in a specified container slot.
        GetContainerItemID(bag, slot) - Returns the item ID of the item in a particular container slot.
        GetContainerItemInfo(bagID, slot) - Get the info for an item in one of the player's bags.
        GetContainerItemLink(bagID, slot) - Returns the itemLink of the item located in bag#, slot#.
        GetContainerNumSlots(bagID) - Returns the total number of slots in the bag specified by the index.
        GetContainerItemQuestInfo(bag, slot) - Returns information about quest and quest-starting items in your bags. (added 3.3.3)
        GetContainerNumFreeSlots(bagID) - Returns the number of free slots and type of slots in the bag specified by the index. (added 2.4)
        HasKey() - Returns 1 if the player has a keyring, nil otherwise.
        UI OpenAllBags() - Open all bags
        UI CloseAllBags() - Close all bags
        PickupBagFromSlot(slot) - Picks up the bag from the specified slot, placing it in the cursor.
        PickupContainerItem(bagID,slot)
        PutItemInBackpack() - attempts to place item in backpack (bag slot 0).
        PutItemInBag(inventoryId) - attempts to place item in a specific bag.
        UI PutKeyInKeyRing() - attempts to place item in your keyring.
        SplitContainerItem(bagID,slot,amount)
        UI ToggleBackpack() - Toggles your backpack open/closed.
        UI ToggleBag(bagID) - Opens or closes the specified bag.
        PROTECTED UseContainerItem(bagID, slot[, onSelf]) - Uses an item located in bag# and slot#. Warning: If a vendor window is open, using items in your pack may sell them - 'onSelf'! Protected situationally? (added 1.12)


Currency


Most of these functions were added in 3.0.2.


        GetCoinText(amount, "separator") - Breaks down money and inserts separator strings. (added 2.4.2)
        GetCoinTextureString(amount[, fontHeight]) - Breaks down money and inserts texture strings.
        GetCurrencyInfo(index) - returns localized_label, amount, icon_file_name of the currency at the index. (added 4.0.1)
        GetCurrencyListSize() - returns the number of elements (both headers and currencies) in the currency list.
        GetCurrencyListInfo(index) - return information about an element in the currency list.
        ExpandCurrencyList(index, state) - sets the expanded/collapsed state of a currency list header.
        SetCurrencyUnused(id, state) - alters whether a currency is marked as unused.
        GetNumWatchedTokens() - returns the number of currently watched.
        GetBackpackCurrencyInfo(id) - returns information about a watched currency.
        SetCurrencyBackpack(id, state) - alters whether a currency is tracked.


Cursor


        AutoEquipCursorItem() - Causes the equipment on the cursor to be equipped.
        ClearCursor() - Clears whatever item the cursor is dragging from the cursor. (added 1.12)
        CursorCanGoInSlot(invSlot) - Return true if the item currently held by the cursor can go into the given inventory (equipment) slot.
        CursorHasItem() - Returns true if the cursor currently holds an item.
        CursorHasMoney() - true/false
        CursorHasSpell() - true/false
        DeleteCursorItem() - Destroys the item on the cursor.
        DropCursorMoney() - Drops the amount of money held by the cursor.
        DropItemOnUnit("unit") - Drops an item from the cursor onto a unit.
        EquipCursorItem(invSlot)
        GetCursorInfo() - Returns information about what the cursor is holding.
        GetCursorMoney() - Returns the amount of money held by the cursor.
        GetCursorPosition() - Returns the cursor's position on the screen.
        HideRepairCursor()
        InRepairMode() - Returns true if your cursor is in repair mode
        NOCOMBAT PickupAction(slot) - Drags an action out of the specified quickbar slot and holds it on the cursor.
        PickupBagFromSlot(slot) - Picks up the bag from the specified slot, placing it in the cursor. If an item is already picked up, this places the item into the specified slot, swapping the items if needed.
        PickupContainerItem(bagID,slot)
        PickupInventoryItem(invSlot) - "Picks up" an item from the player's worn inventory.
        NOCOMBAT PickupItem(itemId or "itemString" or "itemName" or "itemLink")
        PickupMacro("macroName" or index) - Adds the specified macro to the Cursor.
        PickupMerchantItem(index) - Places the item on the cursor. If the cursor already has an item, the item in the cursor will be sold.
        NOCOMBAT PickupPetAction(slot) - Drags an action from the specified pet action bar slot into the cursor.
        PickupPlayerMoney - Picks up an amount of money from the player.
        NOCOMBAT PickupSpell("spellName" | spellID, "bookType") - Adds the specified spell to the Cursor.
        PickupStablePet(index)
        PickupTradeMoney(amount)
        PlaceAction(slot) - Drops an action from the cursor into the specified quickbar slot.
        PutItemInBackpack() - attempts to place item in backpack (bag slot 0).
        PutItemInBag(inventoryId) - attempts to place item in a specific bag.
        ResetCursor()
        SetCursor("cursor" or nil)
        ShowContainerSellCursor(index,slot)
        ShowInspectCursor() - Change the cursor to the magnifying glass inventory inspection cursor
        ShowInventorySellCursor()
        ShowMerchantSellCursor(index) - Changes the cursor to the merchant sell cursor.
        ShowRepairCursor()
        SplitContainerItem(bagID,slot,amount) - Picks up part of a stack.


Debugging


        ConsoleAddMessage(message) - (added 3.0.8)
        debugprofilestart() - starts a timer for profiling during debugging.
        debugprofilestop() - return the time in milliseconds since the last call to debugprofilestart()
        debugstack(start, count1, count2) - Returns a string representation of the current calling stack (added 1.9)
        FrameXML_Debug(flag) - Sets FrameXML logging state which is output to /WoW Folder/Logs/FrameXML.log
        GetDebugStats()
        UI getprinthandler() - Returns the function currently handling print() output.
        UI print(...) - Calls the current print output handler with the provided values, by default printing the values to the default chat frame.
        UI setprinthandler(func) - Changes the function handling print() output.
        UI tostringall(...) - Converts and returns the passed arguments to string.
        wipe(table) - removes all key/value pairs from a table. also available as table.wipe().


Dressing Room


Functions controlling the 'dressing room' interface. (added 1700)


        UI DressUpItemLink("itemString" or "itemLink") - Will show the DressingRoom UI with the given item equipped.
        UI SetDressUpBackground(isAuctionFrame) - Given an Item shown in the Auction House will show the DressingRoom UI with the item equipped.


Dungeon Finder


Functions supporting the Dungeon Finder UI, added in 3.3. See also the #Raid Browser and #Looking for Group sections.


        HW AcceptProposal() - Accept an LFD group invite and enter the dungeon.
        CanPartyLFGBackfill() - Returns whether the party is eligible to recruit additional members from the LFG pool.
        GetLFDChoiceCollapseState(nil or table) - returns LFGCollapseList
        GetLFDChoiceEnabledState(nil or table) - returns LFGEnabledList
        GetLFDChoiceInfo(nil or table) - Returns a table of all dungeon info keyed by dungeonID
        GetLFDChoiceLockedState(nil or table) - Returns a table mapping dungeonID to isLocked (in LFD UI)
        GetLFDChoiceOrder(nil or table) - returns LFDDungeonList
        GetLFDLockPlayerCount() - returns the number of locks in a dungeon group
        GetLFDLockInfo(dungeonID, lockedPlayerNumber) - returns playerName, lockedReason; lockedPlayerNumber is from 1 to #GetLFDLockPlayerCount(); lockedReason is found in LFG_INSTANCE_INVALID_CODES
        GetLFGDungeonInfo(dungeonId) - Returns information about a particular dungeon in the list: dungeonName, typeID, minLevel, maxLevel, recLevel, minRecLevel, maxRecLevel, expansionLevel, groupID, textureFilename, difficulty, maxPlayers, dungeonDescription, isHoliday
        GetLFGDungeonRewards(dungeontype) - dungeontype = 261 (normal) or 262 (heroic), returns doneToday, moneyBase, moneyVar, experienceBase, experienceVar, numRewards
        GetLFGDungeonRewardInfo(dungeonID, rewardIndex) - returns name, texturePath, quantity. rewardIndex matches 1 through numRewards from #GetLFGDungeonRewards
        GetLFGInfoServer - returns inParty, joined, queued, noPartialClear, achievements, lfgComment, slotCount
        GetLFGProposal() - Returns information about a LFD group invite.
        GetLFGProposalEncounter(encounterNumber) - returns bossName, texture, isKilled. encounterNumber is from 1 to totalEncounters from #GetLFGProposal()
        GetLFGProposalMember(playerNumber) - returns info about players (numbers 1-5) in the LFG proposal: isLeader, role, level, responded, accepted, name, class
        GetLFGRandomDungeonInfo(index) - Returns information about a random dungeon queue: id, name
        GetNumRandomDungeons() - returns the number of specific dungeons that can be queued for
        GetPartyLFGBackfillInfo() - Returns information about the dungeon for which you may currently recruit additional members from the LFG pool.
        GetRandomDungeonBestChoice() - Returns suggested random dungeon ID.
        HasLFGRestrictions() - Returns whether the player is in a random party formed by the dungeon finder system.
        IsLFGDungeonJoinable(dungeonId) - Returns whether you can queue for a particular dungeon; dungeonId is from #GetLFGRandomDungeonInfo
        LFGTeleport([toSafety]) - Teleports the player to (toSafety = nil) or from (toSafety = true) a dungeon
        RejectProposal() - Reject an LFD group invite and exit the queue.
        SetLFGHeaderCollapsed(headerID, isCollapsed)
        UnitGroupRolesAssigned(UnitID) - Return's the targeted unit's assigned role.


Enchanting


        GetWeaponEnchantInfo() - Return information about main and offhand weapon enchantments.
        ReplaceEnchant()
        ReplaceTradeEnchant() - Confirm the replacement of an enchantment via trade.
        BindEnchant() - Confirm the binding of the item when enchanting.


Equipment


Equipment management was added in 3.1.2.


        GetNumEquipmentSets() - Returns the number of saved equipment sets.
        GetEquipmentSetInfo(index) - Returns information about an equipment set.
        GetEquipmentSetInfoByName("name") - Returns information about an equipment set.
        GetEquipmentSetItemIDs("name"[, returnTable]) - Populates and returns a table with the item IDs.
        GetEquipmentSetLocations("name"[, returnTable]) - Populates and returns a table with the item locations.
        UI EquipmentManager:UnpackLocation(location) - Unpacks a location integer to determine the actual inventory location.
        PickupEquipmentSet(index) - Places an equipment set on the cursor.
        PickupEquipmentSetByName("name") - Places an equipment set on the cursor.
        EquipmentSetContainsLockedItems("name") - Checks if some of the items in the set are currently locked (pending client/server interaction).
        UseEquipmentSet("name") - Equips an equipment set.
        EquipmentManagerIgnoreSlotForSave(slot) - flags the slot to be ignored when saving an equipment set.
        EquipmentManagerUnignoreSlotForSave(slot) - removes the ignore flag from a slot when saving an equipment set.
        EquipmentManagerClearIgnoredSlotsForSave() - removes the ignore flag from all slots when saving an equipment set.
        SaveEquipmentSet("name", iconIndex) - Saves the currently equipped items in a set.
        RenameEquipmentSet("oldName", "newName") - Renames an equipment set.
        DeleteEquipmentSet("name") - Forgets an equipment set.
        UI GetEquipmentSetIconInfo(index) - Returns information about available icons.


Faction


        CollapseFactionHeader(index) - Collapse a faction header row.
        CollapseAllFactionHeaders() - Collapse all faction header rows.
        ExpandFactionHeader(index) - Expand a faction header row.
        ExpandAllFactionHeaders() - Expand all faction header rows.
        FactionToggleAtWar(index) - Toggle the At War flag for a faction.
        GetFactionInfo(index) - Gets details for a specific faction/faction header.
        GetNumFactions() - Returns the number of lines in the faction display.
        GetSelectedFaction() - Returns the row index of the currently selected faction in reputation window. (added 1.10)
        GetWatchedFactionInfo() - Returns information about the currently watched faction. (added 1.10)
        IsFactionInactive(index) - Returns true if the faction is marked inactive. (added 1.10)
        SetFactionActive(index) - Remove a faction from inactive group. (added 1.10)
        SetFactionInactive(index) - Move a faction to inactive group. (added 1.10)
        SetSelectedFaction(index) - Sets the currently selected faction in reputation window. (added 1.10)
        SetWatchedFactionIndex(index) - Sets which faction should be watched in Blizzard reputation bar. (added 1.10)
        UnitFactionGroup("unit") - Returns the faction group id and name of the specified unit, eg. "Alliance". The string returned is localization-independent, and is used in filepath.


Frame


        CreateFrame("frameType"[ ,"name"][, parent][, "inheritFrame"]) - Create a new frame of the specified type
        CreateFont("name") - Dynamically create a font object
        GetFramesRegisteredForEvent(event) - Returns a list of frames that are registered for the given event. (added 2.3)
        GetNumFrames() - Get the current number of Frame (and derivative) objects
        UI EasyMenu(menuList, menuFrame, anchor, x, y, displayMode, autoHideDelay)
        EnumerateFrames(currentFrame) - Get the Frame which follows currentFrame
        GetMouseFocus() - Returns the frame that currently has the mouse focus.
        UI MouseIsOver - Determines whether or not the mouse is over the specified frame.
        UI ToggleDropDownMenu(level, value, dropDownFrame, anchorName, xOffset, yOffset)
        UI UIFrameFadeIn(frame, fadeTime, startAlpha, endAlpha)
        UI UIFrameFlash(...)


Friend


        AddFriend("playerName") - Add a friend to your friend list.
        AddOrRemoveFriend("playerName"[, "note"]) - Toggles a player's presence on your friends list.
        GetFriendInfo(index) - Returns name, level, class, location, connected, status, and friend note of a friend.
        SetFriendNotes(index, "note") - Sets the note text for a friend.
        GetNumFriends() - Returns how many friends are on your friend list.
        GetSelectedFriend() - Returns the index of the current selected friend.
        RemoveFriend("name" or index) - Removes a friend from your friend list
        SetSelectedFriend(index) - Update the current selected friend.
        ShowFriends() - Request updated friends information from server.
        UI ToggleFriendsFrame([tabNumber]) - Opens/closes the friends pane (possibly on a specific tab).


Glyph


        GetNumGlyphSockets() - Returns the number of Glyph Sockets available at max level. Same result as NUM_GLYPH_SLOTS.
        GetGlyphSocketInfo(socketID[, talentGroup]) - Returns info on a specific Glyph Socket.
        GetGlyphLink(socketID[, talentGroup]) - Returns link text for a Glyph in the desired Socket.
        GlyphMatchesSocket(socketID) - See if the Glyph held by the cursor matches the desired Socket.
        PlaceGlyphInSocket(socketID) - Places the Glyph held by the cursor into the desired Socket.
        RemoveGlyphFromSocket(socketID) - Removes the Glyph from the desired Socket.
        SpellCanTargetGlyph()


GM


        CanComplainChat(lineID) - determines if should show the menu for reporting a line of chat spam/ 'lineID' comes from the player link in the chat line.
        CanComplainInboxItem(index) - determines if we should show the 'report spam' button on a mail item
        ComplainChat(lineID) - complains about a particular line of chat spam
        ComplainInboxItem(index) - complains about a particular mail item
        PROTECTED DeleteGMTicket()
        GMRequestPlayerInfo() - access denied (darn)
        GetGMStatus()
        GetGMTicket()
        GetGMTicketCategories() - Return all available ticket categories (not as a table)
        GMSurveyAnswerSubmit(question, rank, comment)
        GMSurveyCommentSubmit(comment)
        GMSurveyQuestion
        GMSurveySubmit
        HelpReportLag(type) - Uses the Report Lag function on the help screen to report the specified type of lag
        PROTECTED NewGMTicket(type,"text")
        PROTECTED UI Stuck() - Informs the game engine that the player is Stuck.
        PROTECTED UpdateGMTicket(type,"text")


Gossip


        CloseGossip() - Dismiss the gossip window.
        ForceGossip() - Returns whether the gossip text must be displayed. (added 3.3.3)
        GetGossipActiveQuests() - Retrieves a list of the active (?) quests on the NPC you are talking to.
        GetGossipAvailableQuests() - Retrieves a list of the available (!) quests on the NPC you are talking to.
        GetGossipOptions() - Retrieves a list of the available gossip items on the NPC you are talking to.
        GetGossipText() - Retrieves the gossip text.
        GetNumGossipActiveQuests() - Returns the number of active quests that you should eventually turn in to this NPC.
        GetNumGossipAvailableQuests() - Returns the number of quests (that you are not already on) offered by this NPC.
        GetNumGossipOptions() - Returns the number of conversation options available with this NPC.
        SelectGossipActiveQuest(index) - Selects an active quest.
        SelectGossipAvailableQuest(index) - Selects an available quest.
        SelectGossipOption(index) - Selects on a gossip item.


Group


See also the #Raid section.


        AcceptGroup() - Accept the invitation to party.
        ConfirmReadyCheck(isReady) - Indicate if you are ready or not.
        ConvertToRaid() - Converts party to raid.
        DeclineGroup() - Decline the invitation to a party.
        DoReadyCheck() - Initiate a ready check.
        GetLootMethod() - Return the currently active lootMethod
        GetLootThreshold() - Return the current loot threshold (for group/master loot)
        GetMasterLootCandidate(index) - Return the name of a player who is eligible to receive loot in master mode
        GetNumGroupMembers([partyCategoryType]) - Returns the number of players in your group, including yourself [0-40]. (added 5.0.4)
        REMOVED GetNumPartyMembers() - Returns the number of players in your party, excluding yourself [0-4]. (removed 5.0.4)
        REMOVED GetNumRaidMembers() - Returns the number of players in your battleground raid group [0-40]. (removed 5.0.4)
        GetNumSubgroupMembers([partyCategoryType]) - Returns number of players in your subgroup, excluding yourself [0-4]. (added 5.0.4)
        REMOVED GetRealNumPartyMembers() - Returns the number of other players in your home non-battleground party. (removed 5.0.4)
        REMOVED GetRealNumRaidMembers() - Returns the number of players in your non-battleground raid group. (removed 5.0.4)
        GetPartyLeaderIndex() - Returns the index of the party leader [1-4] if not yourself.
        GetPartyMember(index) - Returns 1 if the party member at the given index exists, nil otherwise..
        InviteUnit("name" or "unit") - Invites the specified player to the group you are currently in (added 2.0.0)
        IsInGroup() - Determines if player is in any kind of group. (added 5.0.4)
        IsInRaid() - Determines if player is in raid type group. (added 5.0.4)
        UnitIsGroupAssistant("unit"[, partyCategoryType]) - Returns true if the unit is an assistant in your group. (added 5.0.4)
        REMOVED IsRaidOfficer() - Returns a value based on whether the player is a raid officer, assistant(?). (removed 5.0.4)
        REMOVED UnitIsRaidOfficer("unit") - Returns whether the specified unit is an officer in your raid. (removed 5.0.4)
        UnitIsGroupLeader("unit"[, partyCategoryType]) - Returns true if the unit is the leader of its group. (added 5.0.4)
        REMOVED IsRaidLeader() - Returns a value based on whether the player is a raid leader. (removed 5.0.4)
        REMOVED IsPartyLeader() - Returns true if the player is the party leader. (removed 5.0.4)
        REMOVED UnitIsPartyLeader("unit") - Returns true if the unit is the leader of its party. (removed 5.0.4)
        LeaveParty() - Quit the party, often useful to troubleshoot "phantom party" bugs which may list you in a party when you are not.
        PromoteToLeader("unit") - Promote a unit to party leader.
        SetLootMethod("lootMethod"[, "masterPlayer" or threshold]) - Set the current loot method
        SetLootThreshold(itemQuality) - Set the threshold for group/master loot
        HW UninviteUnit("name" [, "reason"]) - Kick a unit from the party if player is group leader, or initiate a kick vote in an LFD group.
        UnitInParty("unit") - Returns true if the unit is a member of your party.


Guild


        AcceptGuild() - The player accepts the invitation to join a guild.
        BuyGuildCharter("guildName") - Purchases a guild charter for 'guildName'.
        CanEditGuildEvent() - Returns true if you are allowed to edit guild events (in the calendar).
        CanEditGuildInfo() - Returns true if you are allowed to edit the guild info
        CanEditMOTD() - Returns true if you are allowed to edit the guild motd.
        CanEditOfficerNote() - Returns true if you are allowed to edit a guild member's officer note.
        CanEditPublicNote() - Returns true if you are allowed to edit a guild member's public note.
        CanGuildDemote() - Returns true if you are allowed to demote a guild member.
        CanGuildInvite() - Returns true if you are allowed to invite a new member to the guild.
        CanGuildPromote() - Returns true if you are allowed to promote a guild member.
        CanGuildRemove() - Returns true if you are allowed to remove a guild member.
        CanViewOfficerNote() - Returns true if you are allowed to view a Officer Note.
        CloseGuildRegistrar()
        CloseGuildRoster()
        CloseTabardCreation()
        DeclineGuild() - The player declines the invitation to join a guild.
        GetGuildCharterCost() - Returns the cost of purchasing a guild charter.
        GetGuildEventInfo(index) - Returns the event information. (added 2.3)
        GetGuildInfo("unit") - This function returns the name of the guild unit belongs to.
        GetGuildInfoText() - Returns the persistant Guild Information data. (added 1.9)
        GetGuildRosterInfo(index) - This function is used to get info on members in the guild.
        GetGuildRosterLastOnline(index) - Returns time since last online for indexth member in current sort order.
        GetGuildRosterMOTD() - Returns guild's MOTD.
        GetGuildRosterSelection() - Returns the index of the current selected guild member.
        GetGuildRosterShowOffline() - Returns true if showing offline members of the guild.
        GetNumGuildEvents() - Returns the number of guild events. (added 2.3)
        GetNumGuildMembers() - Returns the total and online number of guild members.
        GetTabardCreationCost() - Returns cost in coppers.
        GetTabardInfo()
        GuildControlAddRank("name") - Add another rank called "name". Only Guildmaster.
        GuildControlDelRank("name") - Delete rank "name". Only Guildmaster.
        GuildControlGetNumRanks() - Returns number of ranks after guild frame open. Any guild member can use this.
        GuildControlGetRankFlags() - Returns list of values for each permission for a select rank (default rank 1).
        GuildControlGetRankName(index) - Returns name of the rank at index. Any guild member can use this.
        GuildControlSaveRank("name") - Saves the permissions for rank "name". Only Guildmaster.
        GuildControlSetRank(rank) - Sets the currently selected rank to view.
        GuildControlSetRankFlag(index, enabled) - Enable/disable permission for an action at index. Only Guildmaster.
        GuildDemote("name") - Demotes a player "name".
        GuildDisband() - Disbands at once your guild. You must be the guild's leader to do so. Be careful, no warning is given prior disbanding.
        GuildInfo() - Displays information about the guild you are a member of.
        GuildInvite("name") - Invites a player to your guild.
        GuildLeave() - Removes you from your current guild.
        GuildPromote("name") - Promotes a player "name".
        GuildRoster() - Fetches the guild list and fires a GUILD_ROSTER_UPDATE event.
        GuildRosterSetOfficerNote(index, "note") - Sets the officer note at index to "note".
        GuildRosterSetPublicNote(index, "note") - Sets the public note at index to "note".
        GuildSetMOTD("note") - Set Guild Message of the Day to "note".
        GuildSetLeader("name") - Transfers guild leadership to another character.
        GuildUninvite("name") - Removes the member "name".
        IsGuildLeader("name") - Determine if player "name" is a guild master.
        IsInGuild() - Lets you know whether you are in a guild.
        QueryGuildEventLog() - Fetches the guild event list and fires a GUILD_EVENT_LOG_UPDATE event. (added 2.3)
        SetGuildInfoText() - Sets the persistant Guild Information data. Limit is 500 letters (GuildInfoEditBox is limited to this number). Longer texts are possible, but will be reseted during the day. (added 1.9)
        SetGuildRosterSelection(index) - Selects/deselects a guild member according current sorting order.
        SetGuildRosterShowOffline(enabled) - Sets/Resets the show offline members flag.
        SortGuildRoster("sort") - Sorts guildroster according "sort". Any unknown values sort on "name".
        UnitGetGuildXP("unit") - Returns information about guild experience for the guild unit belongs to.


Guild Bank


All functions were added in 2.3.


        AutoStoreGuildBankItem(tab, slot) - Withdraws an item from the bank, and automatically stores it in the player's inventory.
        BuyGuildBankTab() - Buys a guild bank tab, without confirmation.
        CanGuildBankRepair() - Returns 1 if the player is allowed to pay for repairs with guild bank funds
        CanWithdrawGuildBankMoney() - Returns 1 if the player is allowed to withdraw funds from the guild bank (does not require proximity to the guild bank)
        CloseGuildBankFrame() - Closes the guild bank frame
        DepositGuildBankMoney(money) - Deposits "money" amount in copper.
        GetCurrentGuildBankTab() - Integer of selected tab, >= 1
        GetGuildBankItemInfo(tab, slot) - Returns texture, amount and integer 1 or nil depending on locked state
        GetGuildBankItemLink(tab, slot) - Returns itemLink
        GetGuildBankMoney() - Integer, funds available in copper.
        GetGuildBankMoneyTransaction(index) - No bank proximity required, however QueryGuildBankLog function requires proximity.
        GetGuildBankTabCost() - Integer OR nil - cost in copper OR no tabs available to buy
        GetGuildBankTabInfo(tab) - Returns the name and icon of the guild bank tab queried.
        GetGuildBankTabPermissions(tab) - Gets display / player's access info. Limited data available without bank proximity.
        GetGuildBankText(tab) - Returns text associated with the given guild bank tab
        GetGuildBankTransaction(tab, index) - Requires Guild Bank Proximity
        GetGuildBankWithdrawGoldLimit() - Returns withdraw limit for currently selected rank in guild control (renamed from 'GetGuildBankWithdrawLimit' 4.0)
        REMOVED 5.1.0 RENAMED 4.0 GetGuildBankWithdrawLimit() - Returns withdraw limit for currently selected rank in guild control. (renamed 'GetGuildBankWithdrawGoldLimit' 4.0)(removed 5.1.0)
        GetGuildTabardFileNames()
        GetNumGuildBankMoneyTransactions() - Returns number of money log entries
        GetNumGuildBankTabs() - Integer count of bought tabs, >= 0. No bank proximity required.
        GetNumGuildBankTransactions(tab) - Returns number of log transactions for tab "tab"
        PickupGuildBankItem(tab, slot) - Picks up an item from the guild bank
        PickupGuildBankMoney(money) - Picks up "money" copper from the guild bank
        QueryGuildBankLog(tab) - Updates bank log data from the server, called before all transaction functions. "Money tab" is MAX_GUILDBANK_TABS+1
        QueryGuildBankTab(tab) - Updates bank tab data from the server, called before all item functions.
        SetCurrentGuildBankTab(tab) - Select different bank tab in the UI
        SetGuildBankTabInfo(tab, name, iconIndex) - Modifies name and icon for tab
        SetGuildBankTabPermissions(tab, index, enabled) - Modifies the permissions for the GuildBankTab. Guild Leader Only.
        SetGuildBankWithdrawGoldLimit(amount) - Sets the gold withdraw limit from the guild bank. Guild Leader Only. (renamed from 'SetGuildBankWithdrawLimit' 4.0)
        REMOVED 5.1.0 RENAMED 4.0 SetGuildBankWithdrawLimit(amount) - Sets the gold withdraw limit from the guild bank. Guild Leader Only. (renamed 'SetGuildBankWithdrawGoldLimit' 4.0)(removed 5.1.0)
        SplitGuildBankItem(tab, slot, amount) - Picks up part of a stack
        WithdrawGuildBankMoney(money) - Withdraws "money" copper from the guild bank


Honor


        GetHolidayBGHonorCurrencyBonuses() - Return rewards for participating in a Call to Arms (holiday) battleground. (added 3.3.3)
        GetInspectHonorData() - Return honor info for the inspected unit (if available).
        GetPVPLifetimeStats() - Get your PvP/Honor statistics for your lifetime.
        GetPVPRankInfo(rank[, unit]) - Get information about a specific PvP rank.
        GetPVPRankProgress() - Get information about the PvP rank progress.
        GetPVPSessionStats() - Get your PvP/Honor statistics for this session.
        GetPVPYesterdayStats() - Get your PvP/Honor statistics for yesterday.
        GetRandomBGHonorCurrencyBonuses() - Returns rewards for participating in a random battleground. (added 3.3.3)
        HasInspectHonorData() - Determine if the inspected unit's honor data is available.
        RequestInspectHonorData() - Request honor data for inspected unit.
        UnitPVPName("unit") - Returns unit's name with PvP rank prefix (e.g., "Corporal Allianceguy").
        UnitPVPRank("unit") - Get PvP rank information for requested unit.


Ignore


        AddIgnore("name") - Add a player to your ignore list.
        AddOrDelIgnore("name") - Toggles the ignore state of the specified name.
        DelIgnore("name") - Delete a player from your ignore list.
        GetIgnoreName(index) - Get the name of the player on your ignore list at index.
        GetNumIgnores() - Get the number of players on your ignore list.
        GetSelectedIgnore() - Returns the currently selected index in the ignore listing
        SetSelectedIgnore(index) - Sets the currently selected ignore entry


Inspection


        CanInspect("unit"[, showError]) - Returns whether you can inspect the specified unit.
        CheckInteractDistance("unit", interaction) - Returns whether you're in range to preform various interactions with the specified unit.
        ClearInspectPlayer() - Reset inspect data once finished with it.
        GetInspectArenaTeamData(index) - Returns information about one of the inspected player's arena teams.
        HasInspectHonorData() - Determine if the inspected unit's honor statistics are available.
        RequestInspectHonorData() - Request honor information for inspected unit.
        GetInspectHonorData() - Return honor information about the inspected player.
        NotifyInspect("unit") - Requests information about a unit's inventory and talents from the server.
        UI InspectUnit("unit") - Instructs FrameXML to inspect a particular unit (query server; show UI).


Instance


        CanShowResetInstances() - Determine if player can reset instances at the moment.
        GetBattlefieldInstanceExpiration() - Get shutdown timer for the battlefield instance.
        GetBattlefieldInstanceInfo(index) - Get the instance ID for a battlefield.
        GetBattlefieldInstanceRunTime() - In milliseconds, the time since battleground started (seems to be queried from server because it is not in sync with time()).
        GetInstanceBootTimeRemaining() - Gets the time in seconds after which the player will be ejected from an instance.
        GetInstanceInfo() - Gets informations about the current Instance
        GetNumSavedInstances() - Gets the number of instances that the player is saved to.
        GetSavedInstanceInfo(index) - Gets information about an instance that the player is saved to.
        IsInInstance() - Returns 1 if the player is in an instance, as well as the type of instance (pvp, raid, etc.).
        ResetInstances() - Reset instances.
        GetDungeonDifficulty() - Returns the player's current Dungeon Difficulty setting (1-3).
        SetDungeonDifficulty(difficulty) - Sets the player's Dungeon Difficulty setting (for the 5-man instances).
        GetInstanceDifficulty() - Returns the current instance's Dungeon Difficulty (1-4, or 1 if player is not in an instance).
        GetInstanceLockTimeRemaining() - Returns information about the instance lock timer for the instance the player is currently entering.
        GetInstanceLockTimeRemainingEncounter(id) - Returns information about bosses in the instance the player is about to be saved to.


Inventory


These functions manage your inventory, that is 'equipped items'. See also the #Container / Bag and #Bank sections.


        AutoEquipCursorItem() - Causes the equipment on the cursor to be equipped.
        BankButtonIDToInvSlotID(buttonID, isBag) - Returns the ID number of a bank button or bag in terms of inventory slot ID.
        CancelPendingEquip(index) - This function is used to cancel a pending equip.
        ConfirmBindOnUse()
        ContainerIDToInventoryID(bagID)
        CursorCanGoInSlot(invSlot) - Return true if the item currently held by the cursor can go into the given inventory (equipment) slot
        EquipCursorItem(invSlot)
        EquipPendingItem(invSlot) - Equips the currently pending Bind-on-Equip or Bind-on-Pickup item from the specified inventory slot. (Internal - do not use.)
        GetInventoryAlertStatus(index) - Returns one of several codes describing the "status" of an equipped item.
        GetInventoryItemBroken("unit",invSlot) - Determine if an inventory item is broken (no durability).
        GetInventoryItemCooldown("unit",invSlot) - Get cooldown information for an inventory item.
        GetInventoryItemCount("unit",invSlot) - Determine the quantity of an item in an inventory slot.
        GetInventoryItemDurability(invSlot) - Returns the maximum and remaining durability points for an inventory item.
        GetInventoryItemGems(invSlot) - Returns item ids of the gems socketed in the item in the specified inventory slot.
        GetInventoryItemID("unit", invSlot) - Returns the item id of the item in the specified inventory slot.
        GetInventoryItemLink("unit",slotId) - Returns an itemLink for an inventory (equipped) item.
        GetInventoryItemQuality("unit",invSlot) - Return the quality of an inventory item.
        GetInventoryItemTexture("unit",invSlot) - Return the texture for an inventory item.
        GetInventorySlotInfo(invSlotName) - Get the info for a named inventory slot (slot ID and texture)
        GetWeaponEnchantInfo() - Return information about main and offhand weapon enchantments.
        HasWandEquipped() - Returns 1 if a wand is equipped, false otherwise.
        IsInventoryItemLocked(id) - Returns whether an inventory item is locked, usually as it awaits pending action.
        KeyRingButtonIDToInvSlotID(buttonID) - Map a keyring button to an inventory slot button for use in inventory functions.
        PickupBagFromSlot(slot) - Picks up the bag from the specified slot, placing it in the cursor. If an item is already picked up, this places the item into the specified slot, swapping the items if needed.
        PickupInventoryItem(invSlot) - "Picks up" an item from the player's worn inventory.
        UpdateInventoryAlertStatus()
        PROTECTED UseInventoryItem(invSlot) - Use an item in a specific inventory slot.


Item


These functions operate on item links or item information directly. See also the #Container / Bag and #Inventory sections.


        EquipItemByName(itemId or "itemName" or "itemLink"[, slot]) - Equips an item, optionally into a specified slot.
        GetAuctionItemLink("type", index) - Returns an itemLink for the specified auction item.
        GetContainerItemLink(bagID, slot) - Returns the itemLink of the item located in bag#, slot#.
        GetItemCooldown(itemID) - Returns startTime, duration, enable.
        GetItemCount(itemId or "itemName" or "itemLink"[, includeBank][, includeCharges]) - Returns number of such items in inventory[, or charges instead if it has charges]
        GetItemFamily(itemId or "itemName" or "itemLink") - Returns the bag type that an item can go into, or for bags the type of items that it can contain. (added 2.4)
        GetItemIcon(itemId or "itemString" or "itemName" or "itemLink") - Returns the icon for the item. Works for any valid item even if it's not in the cache. (added 2.4)
        GetItemInfo(itemId or "itemString" or "itemName" or "itemLink") - Returns information about an item.
        GetItemQualityColor(quality) - Returns the RGB color codes for a quality.
        GetItemSpell(item) - Returns name, rank.
        GetItemStats(itemLink, statTable) - Returns a table of stats for an item.
        GetMerchantItemLink(index) - Returns an itemLink for the given purchasable item
        GetQuestItemLink("type", index) - Returns an itemLink for a quest reward item.
        GetQuestLogItemLink("type", index) - Returns an itemLink for a quest reward item.
        GetTradePlayerItemLink(id) - Returns an itemLink for the given item in your side of the trade window (if open)
        GetTradeSkillItemLink(index) - Returns the itemLink for a trade skill item.
        GetTradeSkillReagentItemLink(index, reagentId) - Returns the itemLink for one of the reagents needed to craft the given item
        GetTradeTargetItemLink(id) - Returns an itemLink for the given item in the other player's side of the trade window (if open)
        IsUsableItem(item) - Returns usable, noMana.
        IsConsumableItem(item)
        IsCurrentItem(item)
        IsEquippedItem(item)
        IsEquippableItem(itemId or "itemName" or "itemLink") - Returns 1 or nil.
        IsEquippedItemType("type") - Where "type" is any valid inventory type, item class, or item subclass.
        IsItemInRange("itemName" or "itemLink", "unit") - Nil for invalid target, 0 for out of range, 1 for in range.
        ItemHasRange(item)
        OffhandHasWeapon() - Determine if your offhand carries a weapon.
        SplitContainerItem(bagID,slot,amount) - Picks up part of a stack.
        UI SetItemRef(link, text, button) - Handles item link tooltips in chat.


Item Socketing


The following were introduced along with socketed items and gems in 2.0. The 'id' refers to a 1-based index of the sockets in the item being considered for socketing.


        AcceptSockets() - Sockets tentative gems into the sockets, replacing existing gems if necessary.
        ClickSocketButton(id) - If the cursor is currently holding a gem, tentatively insert it into the socket.
        CloseSocketInfo() - Stops considering the item for socketing, without applying changes.
        GetSocketItemInfo() - Returns information about the item currently being socketed.
        GetSocketItemRefundable() - Returns whether the item currently being socketed is refundable.
        GetSocketItemBoundTradeable() - Returns if the item currently being socketed is temporarily tradable (BoP boss loot).
        GetNumSockets() - Returns the number of sockets in the item currently being socketed.
        GetSocketTypes(id) - Returns the type (color) of a socket in the item.
        GetExistingSocketInfo(id) - Returns information about the existing gem in the socket.
        GetExistingSocketLink(id) - Returns an item link for the existing gem in the socket.
        GetNewSocketInfo(id) - Returns information about the new (tentative) gem in the socket.
        GetNewSocketLink(id) - Returns an item link for the new (tentative) gem in the socket.
        SocketInventoryItem(slot) - Considers the item in the inventory slot for socketing.
        SocketContainerItem(bag, slot) - Consider an item in a container slot for socketing.


Item Text


These functions relate to item text: books, etc...


        CloseItemText() - Close an open item text: books, plaques, etc...
        ItemTextGetCreator() - Get the creator of the current text, if player-created.
        ItemTextGetItem() - Get the name of the text.
        ItemTextGetMaterial() - Get the material on which the text is printed.
        ItemTextGetPage() - Get the page number of the currently viewed page.
        ItemTextGetText() - Get the page contents of the currently viewed page.
        ItemTextHasNextPage() - Determine if there is another page after the current one.
        ItemTextNextPage() - Request the next page of the text.
        ItemTextPrevPage() - Request the previous page of the text.


Knowledge Base


        KBArticle_BeginLoading(articleId, searchType) - Starts the article loading process.
        KBArticle_GetData() - Returns information about the current article.
        KBArticle_IsLoaded() - Returns true if an article is loaded.
        KBQuery_BeginLoading(searchText, categoryIndex, subcategoryIndex, articlesPerPage, curPage) - Starts a query for articles.
        KBQuery_GetArticleHeaderCount() - Returns the number of article headers in the current query.
        KBQuery_GetArticleHeaderData(index) - Returns information about an article header of the current query.
        KBQuery_GetTotalArticleCount() - Returns the total number of articles that matches the current query.
        KBQuery_IsLoaded() - Returns true if a query loaded successfuly.
        KBSetup_BeginLoading(articlesPerPage, curPage) - Starts the loading process for the KB start page.
        KBSetup_GetArticleHeaderCount() - Returns the number of articles for the current page.
        KBSetup_GetArticleHeaderData(index) - Returns information for an article header.
        KBSetup_GetCategoryCount() - Returns the number of categories in the knowledge base.
        KBSetup_GetCategoryData(index) - Returns information about a category.
        KBSetup_GetLanguageCount() - Returns the number of languages in the knowledge base.
        KBSetup_GetLanguageData(index) - Returns information about a language.
        KBSetup_GetSubCategoryCount(category) - Returns the number of subcategories for a category.
        KBSetup_GetSubCategoryData(category, index) - Returns information about a subcategory.
        KBSetup_GetTotalArticleCount() - Returns the total number of articles in the knowlege base.
        KBSetup_IsLoaded() - Returns true if the knowledge base is loaded successfuly.
        KBSystem_GetMOTD() - Returns the server message of the day.
        KBSystem_GetServerNotice() - Returns the server notice.
        KBSystem_GetServerStatus() - Returns the server status text.


Location


These functions relate to the current location of the player and how it's displayed.


        GetMinimapZoneText() - Returns the zone text, that is displayed over the minimap.
        GetRealZoneText() - Returns either instance name or zone name
        GetSubZoneText() - Returns the subzone text, e.g. "The Canals".
        GetZonePVPInfo() - Returns PVP info for the current zone.
        GetZoneText() - Returns the zone text, e.g. "Stormwind City".


Looking for Group


Functions for use in the 'Looking for Group' tool. See also the #Dungeon Finder and #Raid Browser sections.


        CompleteLFGRoleCheck(boolean) - Passing false means declining the roleCheck. The returned boolean seems to indicate that the roleCheck was successful?
        GetLFGDeserterExpiration() - Returns the time at which you may once again use the dungeon finder after prematurely leaving a group. (added 3.3.3)
        GetLFGRandomCooldownExpiration() - Returns the time at which you may once again queue for a random dungeon. (added 3.3.3)
        GetLFGBootProposal() - Returns information about an LFG Kick vote in progress.
        UI GetLFGMode() - returns mode, subMode (sometimes empty result)
        GetLFGQueueStats() - returns current state and wait times for being in queue
        GetLFGRoles() - returns isLeader, isTank, isHealer, isDPS - Returns the roles you signed up as, not the role you were assigned.
        GetLFGRoleUpdate() - returns roleCheckInProgress, slots, members
        GetLFGRoleUpdateSlot(slot) - returns dungeonType, dungeonID for a particular role slot (integer)
        SetLFGBootVote(boolean) - responds to a vote-kick
        SetLFGComment("comment")
        SetLFGRoles(isLeader, isTank, isHealer, isDPS) - changes the selected roles
        UninviteUnit("name" [, "reason"]) - initiate a kick vote in a LFD group.
        UnitGroupRolesAssigned(UnitID) - Return's the targeted unit's assigned role.
        UnitHasLFGDeserter("unit") - returns whether the specified unit has recently deserted
        UnitHasLFGRandomCooldown("unit") - returns whether the specified unit has recently queued for a random


Loot


Automatic looting behavior is controlled by autoLootDefalt CVar.


        CloseLoot([uiFailedFlag])
        PROTECTED ConfirmBindOnUse()
        ConfirmLootRoll(rollId[, roll]) - Confirm a loot roll (added 1300)
        ConfirmLootSlot(slot) - Confirm looting of a BoP item.
        GetLootMethod() - Return the currently active lootMethod
        GetLootRollItemInfo(rollId)
        GetLootRollItemLink(rollId)
        GetLootRollTimeLeft(rollid)
        GetLootSlotInfo(slot) - Returns icon path, item name, and item quantity for the item in the given loot window slot
        GetLootSlotLink(slot) - Returns an itemLink for the item in the given loot window slot
        GetLootThreshold() - Return the current loot threshold (for group/master loot)
        GetMasterLootCandidate(index) - Return the name of a player who is eligible to receive loot in master mode
        GetNumLootItems() - Returns amount of objects to loot (number)
        GetOptOutOfLoot() - Return whether the character is currently automatically passing on all loot.
        GiveMasterLoot(slot,index)
        IsFishingLoot()
        LootSlot(slot) - Used to loot the specified slot.
        LootSlotIsCoin(slot) - Returns 1 if the given loot window slot contains coins (copper, silver, gold)
        LootSlotIsCurrency(slot) - Returns 1 if the given loot window slot contains a form of currency (archaeology fragments)
        LootSlotHasItem(slot)
        RENAMED LootSlotIsItem(slot) (renamed to LootSlotHasItem 5.0.2)
        RollOnLoot(rollId[, roll]) - Roll or pass on a loot event started by the game engine.
        SetLootMethod("lootMethod"[, "masterPlayer" or threshold]) - Set the current loot method.
        SetLootPortrait()
        SetLootThreshold(itemQuality) - Set the threshold for group/master loot.
        SetOptOutOfLoot(optOut) - Enables or disables automatic passing on all loot.


Macro


        NOCOMBAT CreateMacro("name", icon, "body", perCharacter, isLocal) - Create a new macro. (nocombat 2.0)
        CursorHasMacro() - Returns 1 if the cursor is currently dragging a macro. (added 2.0.3)
        DeleteMacro(id or "name") - Deletes a macro.
        NOCOMBAT EditMacro(index, "name", iconIndex, "body", isLocal, perCharacter) - Saves a macro. (nocombat 2.0)
        GetMacroBody(id or "name") - Returns the body (macro text) of a macro.
        GetMacroIconInfo(index) - Returns texture of the icons provided by Blizzard.
        GetMacroItemIconInfo(index) - Returns texture of the item icons provided by Blizzard
        GetMacroIndexByName("name") - Returns macro index.
        GetMacroInfo(id or "name") - Returns "name", "iconTexture", "body", isLocal.
        GetNumMacroIcons() - Returns the number of usable icons provided by Blizzard.
        GetNumMacroItemIcons() - Returns the number of usable item icons provided by Blizzard.
        GetNumMacros() - Returns the number of macros the user has.
        PickupMacro(id or "name") - Pickup a macro button icon.
        PROTECTED RunMacro(id or "name") - Runs a macro.
        PROTECTED RunMacroText("macro") - Interpret the given string as a macro and run it.
        SecureCmdOptionParse("command") - Used for evaluating conditionals in macros, returning the appropriate choice.
        PROTECTED StopMacro() - Stops the currently executing macro.


Mail


See also Events associated with Mail.


        AutoLootMailItem(index) - Loot all items from mail message.
        CheckInbox() - Populate client's inbox with mail from server.
        ClearSendMail() - This clears the text in the send mail tab and places the COD item in the inventory.
        ClickSendMailItemButton([itemIndex, [clearItem]]) - Places or picks up an item from the send mail frame.
        CloseMail() - Closes the mail window.
        DeleteInboxItem(index) - Deletes the inbox item at index. It returns immediately, it does not seem to wait for the deletion to go through, giving the normal problems with rapid mail removal attempts.
        DropCursorMoney - Drops the amount of money held by the cursor.
        GetCoinIcon(amount)
        GetInboxHeaderInfo(index) - Returns information about a message in the inbox.
        GetInboxItem(index, itemIndex) - Returns description of the attachment attached to message at (index).
        GetInboxItemLink(index, itemIndex) - Returns link of the attachment attached to message at (index).
        GetInboxNumItems() - Returns the number of messages in your inbox.
        GetInboxText(index) - Returns the message text of message at (index).
        GetInboxInvoiceInfo(index) - Returns informations about an auction house invoice.
        GetLatestThreeSenders - Returns the senders of the most recent unread mail.
        GetNumPackages() - Not yet fully implemented. Currently it always returns 1.
        GetNumStationeries() - Not yet fully implemented. Currently it always returns 1.
        GetPackageInfo(index) - Not yet fully implemented. Currently an index of 1 returns "Test Package".
        GetSelectedStationeryTexture() - Not yet fully implemented. Currently it returns "STATIONERYTEST" when the mailbox is open.
        GetSendMailCOD() - determine amount of gold entered in COD box in mail frame when mail is sent
        GetSendMailItem(index) - Get information about an item attached on the send mail frame.
        GetSendMailItemLink(index) - Get link for an item attached on the send mail frame.
        GetSendMailMoney()
        GetSendMailPrice() - Gets the cost for sending mail.
        GetStationeryInfo(index) - Not yet fully implemented. Currently an index of 1 returns "Default Stationery".
        HasNewMail() - Returns nil if there is no new mail.
        InboxItemCanDelete(index) - Boolean check for whether a message is returnable to the sender.
        ReturnInboxItem(index) - Returns to the sender the attached item in the mail message at the specified index.
        SelectPackage(index) - Not yet fully implemented. It does nothing visible.
        SelectStationery(index) - Not yet fully implemented. It does nothing visible.
        SendMail("target", "subject", "body") - If the mailbox is open, this sends mail.
        PROTECTED SetSendMailCOD(amount) - Make next mail sent using SendMail() COD target for amount. (protected 2.0)
        PROTECTED SetSendMailMoney(amount) - Add money to next mail sent using SendMail(). (protected 2.0)
        TakeInboxItem(index, itemIndex) - Take the attached item from the mailbox message at index.
        TakeInboxMoney(index) - Take the attached money from the mailbox message at index.
        TakeInboxTextItem(index) - Creates a permanent copy of letter (readable "Plain Letter").


Mapping


These functions are related to display of the world map.


        ClickLandmark(id)
        GetChallengeModeMapInfo - Returns details about the challenge mode for an instance map
        GetCorpseMapPosition() - Returns the position of the corpse on the current world map.
        GetCurrentMapContinent() - Returns the number of the continent the world map is currently shown.
        GetCurrentMapDungeonLevel() - Returns which level of a multi-level map is currently shown.
        GetNumDungeonMapLevels() - Returns the number of levels in the currently shown zone map (0 for none).
        GetCurrentMapAreaID () - Returns the area id of the current map.
        GetCurrentMapZone() - Returns the number of the zone the world map is currently showing.
        GetMapContinents() - Returns the continent names.
        GetMapDebugObjectInfo(id)
        GetMapInfo() - Returns the name and size of the current world map.
        GetMapLandmarkInfo(landmarkIndex) - Returns information about a landmark on the current world map.
        GetMapNameByID(id) - Returns the localized map name for a given MapID
        GetMapOverlayInfo(overlayIndex) - Returns information about an overlay on the current world map.
        GetMapZones(continentIndex) - Returns the zone names of a continent.
        GetNumMapDebugObjects()
        GetNumMapLandmarks() - Returns the number of landmarks on the current world map.
        GetNumMapOverlays() - Returns the number of overlays on the current world map.
        GetPlayerMapPosition("unit") - Returns the position of a unit on the current world map.
        ProcessMapClick(x,y) - Passes a click to the client, which then calculates if the zone has to be changed.
        RequestBattlefieldPositions() - Request new data for GetBattlefieldPosition().
        SetDungeonMapLevel(level) - Sets which level of a multi-level map (Dalaran, dungeons, etc) is currently shown.
        SetMapByID(id) - Set map by area id.
        SetMapToCurrentZone() - Sets the current world map to the zone the player is presently in.
        SetMapZoom(continentIndex[, zoneIndex]) - Sets the current world map to a specific continent and optionally zone.
        SetupFullscreenScale() - Configures scale of full-screen views, such as the world map, to best fill screen.
        UpdateMapHighlight(x,y) - Provides map rollover information for highlighting.
        CreateWorldMapArrowFrame("frame") - create a arrow cursor for the player position and orientation.
        UpdateWorldMapArrowFrames() - update the orientation of the arrow cursor based on the current player orientation.
        ShowWorldMapArrowFrame(bool) - show or hide the arrow representing the player.
        PositionWorldMapArrowFrame(x,y) - set the position of the arrow representing the player
        ZoomOut() - "Zooms out" of the current map: going from zone to continent to world view.


Merchant


        BuyMerchantItem(index[, qty]) - Buys an item from a merchant.
        BuybackItem(index) - Buys back a sold item.
        CanMerchantRepair() - Returns true if the merchant can repair items.
        CloseMerchant() - Closes the merchant window.
        GetBuybackItemInfo(index) - Returns information about the buyback item.
        GetBuybackItemLink(index) - Returns an itemLink for the buyback item.
        GetMerchantItemCostInfo (index) - Returns "alternative currency" information about an item.
        GetMerchantItemCostItem (index, itemIndex) - Returns information about an "alternative currency" component of the price for a purchasable item.
        GetMerchantItemInfo(index) - Returns information about the given purchasable item
        GetMerchantItemLink(index) - Returns an itemLink for the given purchasable item
        GetMerchantItemMaxStack(index) - Returns the maximum number of items in a stack.
        GetMerchantNumItems() - Returns the number of items the merchant sells.
        GetRepairAllCost()
        HideRepairCursor()
        InRepairMode() - Returns true if your cursor is in repair mode
        PickupMerchantItem(index) - Places the item on the cursor.
        RepairAllItems([guildBankRepair]) - Repairs all equipped and inventory items.
        ShowMerchantSellCursor(index) - Changes the cursor to the merchant sell cursor.
        ShowRepairCursor()
        GetNumBuybackItems() - Returns number of items available for buyback


Movement


Most of these functions may only called on a hardware event from 'secure' code.


        FollowUnit("unit") - Follow an ally with the specified UnitID
        PROTECTED CameraOrSelectOrMoveStart() - Begin "Left click" in the 3D world. (protected 1.10)
        PROTECTED CameraOrSelectOrMoveStop([stickyFlag]) - End "Left click" in the 3D world. (protected 1.10)
        PROTECTED JumpOrAscendStart() - Makes the player jump.
        PROTECTED AscendStop() - Called when you release the jump key.
        PROTECTED MoveBackwardStart - The player begins moving backward at the specified time.
        PROTECTED MoveBackwardStop - The player stops moving backward at the specified time.
        PROTECTED MoveForwardStart - The player begins moving forward at the specified time.
        PROTECTED MoveForwardStop - The player stops moving forward at the specified time.
        PROTECTED StrafeLeftStart - The player begins strafing left at the specified time.
        PROTECTED StrafeLeftStop - The player stops strafing left at the specified time.
        PROTECTED StrafeRightStart - The player begins strafing right at the specified time.
        PROTECTED StrafeRightStop - The player stops strafing right at the specified time.
        PROTECTED ToggleAutoRun - Turns auto-run on or off
        PROTECTED ToggleRun - Toggle between running and walking.
        PROTECTED TurnLeftStart - The player starts turning left at the specified time.
        PROTECTED TurnLeftStop - The player stops turning left at the specified time.
        PROTECTED TurnOrActionStart() - Begin "Right Click" in the 3D world. (protected 1.10)
        PROTECTED TurnOrActionStop() - End "Right Click" in the 3D world. (protected 1.10)
        PROTECTED TurnRightStart - The player starts turning right at the specified time.
        PROTECTED TurnRightStop - The player stops turning right at the specified time.


Music Player


These functions were exclusive to the Mac client, added in 1.12. The functions are protected and are only called through key bindings, thus they only serve to enable you to bind specific keys to control iTunes while using the WoW client.


        PROTECTED MusicPlayer_BackTrack() - Go back a track.
        PROTECTED MusicPlayer_NextTrack() - Go forward a track.
        PROTECTED MusicPlayer_PlayPause() - Toggle play/pause.
        PROTECTED MusicPlayer_VolumeDown() - Reduce music volume.
        PROTECTED MusicPlayer_VolumeUp() - Increase music volume.


Pet


        PROTECTED CastPetAction(index) - Cast the corresponding pet skill.
        ClosePetStables() - Close the pet stables user interface.
        DropItemOnUnit("unit") - Drops an item from the cursor onto a unit.
        GetPetActionCooldown(index) - Returns cooldown information for the pet action at the specificed pet action bar slot.
        GetPetActionInfo(index) - Returns information on the pet action at the specified pet action bar slot.
        GetPetActionSlotUsable(slot)
        GetPetActionsUsable() - Returns a value indicating if the player's pet's actions can be used at this time.
        GetPetExperience() - Returns the pet's current xp, and total xp required for next level.
        GetPetFoodTypes() - Returns a list of the food types the player's pet can eat.
        GetPetHappiness() - Returns the pet's happiness, damage percentage, and loyalty gain rate.
        GetPetIcon() - Returns the path to the texture to use as the icon for the player's pet.
        GetPetTimeRemaining() - Returns in milliseconds about some timeout for the player's pet.
        GetStablePetFoodTypes(index) - Returns a list of the food types a specific stabled pet can eat.
        GetStablePetInfo(index) - Returns information about a specific stabled pet.
        HasPetSpells() - Returns true if the player has pet spells.
        HasPetUI() - Returns 1 if the player has a pet User Interface.
        PetAbandon() - Permanently abandons your pet.
        PROTECTED PetAggressiveMode() - Set your pet in aggressive mode. (protected 2.0)
        PROTECTED PetAttack() - Instruct your pet to attack your target. (protected 2.0)
        IsPetAttackActive() - Returns true if the pet is currently attacking.
        PetStopAttack() - Stop the attack of the pet.
        PetCanBeAbandoned() - Returns true if the pet is abandonable.
        PetCanBeDismissed()
        PetCanBeRenamed() - Returns true if the pet can be renamed.
        PROTECTED PetDefensiveMode() - Set your pet in defensive mode. (protected 2.0)
        PetDismiss() - Dismiss your pet.
        PROTECTED PetFollow() - Instruct your pet to follow you. (protected 2.0)
        PetHasActionBar() - Determine if player has a pet with an action bar.
        PROTECTED PetPassiveMode() - Set your pet into passive mode. (protected 2.0)
        PetRename("name") - Renames the pet.
        PROTECTED PetWait() - Instruct your pet to remain still. (protected 2.0)
        PickupPetAction(slot) - Drags an action from the specified pet action bar slot into the cursor.
        PickupStablePet(index)
        SetPetStablePaperdoll(modelObject)
        PROTECTED TogglePetAutocast(index) - Toggles whether the specified pet ability should autocast or not.
        PROTECTED ToggleSpellAutocast("spellName" | spellId, bookType) - Toggles whether the specified spell should autocast or not.
        GetSpellAutocast("spellName" | spellId, bookType) - Check whether the specified spell autocasts or not.


Petition


Petitions are signup documents for guilds and arena teams. Some functions below only apply to a particular petition type.


        CanSignPetition() - Returns nil if the player cannot sign the current petition.
        ClosePetition() - Closes the current petition.
        GetNumPetitionNames() - Gets the number of signatures on the current petition.
        GetPetitionInfo() - Retrieves information about the current petition.
        GetPetitionNameInfo(index) - Retrieves information about a signature on the petition.
        OfferPetition() - Offers a petition to your target, inviting them to join your would-be guild/arena team.
        RenamePetition("name") - Renames the current petition.
        SignPetition() - Signs the current petition.
        TurnInGuildCharter() - Founds a guild.


Quest


See also the #Gossip section.


        AbandonQuest - Abandon the specified quest.
        AcceptQuest - Accept the specified quest.
        AddQuestWatch(questIndex[, watchTime]) - Add a quest to the watch list.
        AddWorldQuestWatch(questId) - Add a world quest to the watch list.
        CloseQuest
        CollapseQuestHeader - Collapses a quest header.
        CompleteQuest - Complete the specified quest.
        ConfirmAcceptQuest - Accept an escort quest being started by a player nearby.
        DeclineQuest - Declines the currently offered quest.
        ExpandQuestHeader - Expands a quest header.
        GetAbandonQuestName - Gets the name of a quest while it is being abandoned.
        GetActiveLevel(index) - Gets the level of an active quest (only available after QUEST_GREETING event).
        GetActiveTitle(index) - Gets the title of an active quest (only available after QUEST_GREETING event).
        GetAvailableLevel(index) - Gets the level of an available quest (only available after QUEST_GREETING event).
        GetAvailableTitle(index) - Gets the title of an available quest (only available after QUEST_GREETING event).
        GetAvailableQuestInfo(index) - Returns metadata (quest type) about an available quest. (added 3.3.3)
        GetGreetingText()
        GetNumActiveQuests - Gets the number of currently active quests from this NPC (only available after QUEST_GREETING event).
        GetNumAvailableQuests - Gets the number of currently available quests from this NPC (only available after QUEST_GREETING event).
        GetNumQuestChoices - Returns the number of rewards available for choice for quest currently in gossip window.
        GetNumQuestItems - Returns the number of items necessary to complete a particular quest.
        GetNumQuestLeaderBoards([questIndex]) - Returns the number of available quest objectives.
        GetNumQuestLogChoices - Returns the number of options someone has when getting a quest item.
        GetNumQuestLogEntries - Returns the number of entries in the quest log.
        GetNumQuestLogRewards - Returns the count of the rewards for a particular quest.
        GetNumQuestRewards - Returns number of reward items (those that you always get) for quest currently in gossip window.
        GetNumQuestWatches() - Returns the number of quest watches active.
        GetObjectiveText() - Gets the objective of the current quest.
        GetProgressText() - Returns quest progress text, displayed by the NPC before the player pressed "Continue".
        GetQuestBackgroundMaterial - Returns the material string associated with the particular quest.
        GetQuestGreenRange() - Return for how many levels below you quests and mobs remain "green" (i.e. yield xp)
        GetQuestIndexForTimer
        GetQuestIndexForWatch(watchIndx) - Return the quest index for the specified watch
        GetQuestItemInfo - Returns basic information about the reward/choice/required item for quest currently in gossip window.
        GetQuestItemLink - Returns an itemLink for a selected quest reward/choice/required item for quest currently in gossip window.
        GetQuestLink(index) - Returns a QuestLink for a quest
        GetQuestLogChoiceInfo - Returns a bunch of data about a quest reward choice from the quest log.
        GetQuestLogGroupNum() - Returns suggested number of players for quest selected currently in log or 0 if there's no suggestion.
        GetQuestLogItemLink - Returns item link for selected quest reward/choice/required item from quest log.
        GetQuestLogLeaderBoard(ldrIndex[, questIndex]) - Gets information about the objectives for a quest.
        GetQuestLogPushable - Returns true if the currently loaded quest in the quest window can be shared.
        GetQuestLogQuestText - Returns the description and objectives required for the specified quest.
        GetQuestLogRequiredMoney - Returns amount of money required for quest completion from quest log.
        GetQuestLogRewardInfo - Returns a pile of reward item info from the quest log.
        GetQuestLogRewardMoney - Returns a number representing the amount of copper returned by a particular quest.
        GetQuestLogRewardSpell - Returns name and texture of spell awarded for quest completion from quest log.
        GetQuestLogRewardTalents - Returns number of talents awarded for quest completion from quest log.
        GetQuestLogRewardXP - Returns the amount of experience awarded by a particular quest.
        GetQuestLogSelection - Returns a number associated with the QuestLogSelection index.
        GetQuestLogTimeLeft - Returns the seconds remaining on the current quest timer.
        GetQuestLogTitle(index) - Returns verbose data about a particular quest log entry: level requirement, tag, suggested group, completed status, etc.
        GetQuestMoneyToGet - Returns amount of money required for quest currently displayed in gossip.
        GetQuestReward(rewardIndex) - Completes the quest with the specified quest reward.
        GetQuestText - Gets the description of the current quest.
        GetQuestTimers - Returns all of the quest timers currently in progress.
        GetRewardArenaPoints() - Returns the amount of arena points awarded by the currently displayed quest.
        GetRewardHonor() - Returns the amount of honor points awarded by the currently displayed quest.
        GetRewardMoney() - Returns a amount of copper rewarded for completion of quest displayed in gossip.
        GetRewardSpell() - Returns name and texture of spell awarded for quest completion for quest currently in gossip window.
        GetRewardTalents() - Returns number of talents awarded for quest completion for quest currently in gossip window.
        GetRewardText() - Returns quest reward text, displayed by the NPC before the player hits "Complete Quest".
        GetRewardTitle() - Returns the title awarded by the currently displayed quest.
        GetRewardXP() - Returns the amount of experience awarded by the currently displayed text.
        GetTitleText - Retrieves the title of the quest while talking to the NPC about it.
        IsCurrentQuestFailed
        IsQuestCompletable - Returns true if a quest is possible to complete.
        IsQuestWatched(questIndex) - Determine if the specified quest is watched.
        IsWorldQuestWatched(questId) - Determine if the specified world quest is watched.
        IsUnitOnQuest(questIndex, "unit") - Determine if the specified unit is on the given quest.
        QuestChooseRewardError - Throws an error when the quest choose reward method doesn't work.
        QuestFlagsPVP() - Determine if the quest will flag you you for PvP when accepted.
        QuestGetAutoAccept() - Returns whether the last-offered quest was automatically accepted. (added 3.3.0)
        QuestLogPushQuest - Initiates the sharing of the currently viewed quest in the quest log.
        RemoveQuestWatch(questIndex) - Removes a quest watch by questIndex.
        RemoveWorldQuestWatch(questId) - Removes a world quest watch by questId.
        SelectActiveQuest - Selects an active quest from the NPC. only available after QUEST_GREETING event.
        SelectAvailableQuest - Selects an available quest from the NPC. only available after QUEST_GREETING event.
        SelectQuestLogEntry - Sets the selected quest, required for most GetQuest functions.
        SetAbandonQuest - Called before #AbandonQuest().
        ShiftQuestWatches(id1, id2) - Exchanges the order of two watched quests. (added 3.3.3)
        SortQuestWatches() - Sorts the watched quests according to proximity and returns whether the order changed since last sorting. (added 3.3.3)
        GetDailyQuestsCompleted - Return the current number of daily quests completed today.
        GetMaxDailyQuests - Returns the maximum number of daily quests completable in one day.
        GetQuestResetTime - Returns number of seconds until quest reset.
        WatchFrame_Update - Updates the watch frame display.
        QueryQuestsCompleted() - Query list of completed quests. (added 3.3.0)
        GetQuestsCompleted([table]) - Returns list of completed quests. only available after QUEST_QUERY_COMPLETE event. (added 3.3.0)
        QuestIsDaily() - Returns whether the offered quest is a daily quest. (added 3.3.3)
        QuestIsWeekly() - Returns whether the offered quest is a weekly quest. (added 3.3.3)


Raid


See also the #Group section.


        ClearRaidMarker() - Removes all current active raid markers (flares). (added 4.0.1)
        ConvertToRaid() - Converts party to raid.
        ConvertToParty() - Converts raid to party.
        DemoteAssistant("unit") - Demotes player from assistant status. Requires raid leadership.
        GetAllowLowLevelRaid() - Returns whether joining low-level raids is enabled for the current character.
        GetPartyAssignment("assignment") - Returns unitID of unit assigned to given role.
        GetPartyAssignment("assignment", "unit") - Returns a value based on whether the unit is assigned to given role
        GetRaidRosterInfo(raidIndex) - Returns information about the members of your raid .
        GetRaidRosterSelection
        GetRaidTargetIndex("unit") - Get the raid target index assigned to a unit.
        GetReadyCheckStatus("unit") - Returns a raid member's response to the current LFG check.
        InitiateRolePoll() - Initiates a role check.
        PROTECTED PlaceRaidMarker(index) - Brings up a target selection circle to place a raid marker (flare). Valid indexes 1-5. (added 4.0.1)
        PromoteToAssistant("unit") - Promotes player to assistant status. Requires raid leadership.
        RequestRaidInfo() - Returns information about which instances you are saved to.
        PROTECTED SetPartyAssignment("assignment", player) (added 2.3.3)
        SetAllowLowLevelRaid(allowed) - Controls whether the current character can join low-level raids.
        SetRaidRosterSelection(index)
        SetRaidSubgroup(index, subgroup) - Move a raid member from his current subgroup into a different, non-full subgroup.
        PROTECTED SwapRaidSubgroup(index1, index2) - Swaps raid members into different groups.
        SetRaidTarget("unit", index) - Set the raid target index for a unit.
        UnitInRaid("unit") - Returns raidIndex if unit is in your raid, nil if not.


Raid Browser


Functions hidden supporting the Raid Browser UI, added in 3.3. See also the #Dungeon Finder and #Looking for Group sections. This is a very preliminary list of functions by perusing FrameXML\LFRFrame.lua/xml files. Please edit and contribute if you know more about these =)


        UI LFGGetDungeonInfoByID(id) - returns data for the specified dungeon/raid/category ID, from the table returned by #GetLFDChoiceInfo. Raid category IDs and raid IDs may be obtained from the UI function LFR_FULL_RAID_LIST_HEADER_ORDER, LFR_FULL_RAID_LIST = #GetFullRaidList().
        GetInstanceLockTimeRemainingEncounter(index) - returns bossName, texture, isKilled
        RefreshLFGList()
        SearchLFGGetEncounterResults(index, bossIndex) - returns bossName, texture, isKilled
        SearchLFGGetJoinedID() - returns the currently selected raid ID or nil
        SearchLFGGetNumResults() - returns numResults, totalResults
        SearchLFGGetPartyResults(index, partyMemberIndex) - returns name, level, relationship, className, areaName, comment
        SearchLFGGetResults(index) - returns name, level, areaName, className, comment, partyMembers, status, class, encountersTotal, encountersComplete, isLeader, isTank, isHealer, isDamage
        HW SearchLFGJoin(typeID, raidID) - enters a search into the Raid Browser
        SearchLFGLeave() - removes yourself from looking through the Raid Browser. Equivalent to selecting "none" in the Raid Browser
        SearchLFGSort(sortType)
        SetLFGComment(comment) - sets the comment in the raid browser




These also appear to be used by the Raid Browser, as well as the Dungeon Finder:


        ClearAllLFGDungeons()
        JoinLFG()
        LeaveLFG()
        RequestLFDPartyLockInfo()
        RequestLFDPlayerLockInfo()
        SetLFGDungeon(id)
        SetLFGDungeonEnabled(dungeonID, isEnabled)
        SetLFGHeaderCollapsed(headerID, isCollapsed)


RealID (BNet)


These functions are only available in Patch 3.3.5.


        BNAcceptFriendInvite(ID)
        BNConnected() - Returns your battle.net connected state (True|False)
        BNCreateConversation(id,id)
        BNDeclineFriendInvite(ID)
        BNFeaturesEnabled()
        BNFeaturesEnabledAndConnected()
        BNGetBlockedInfo(index)
        BNGetBlockedToonInfo(index)
        BNGetConversationInfo(chatTarget) - returns unknown
        BNGetConversationMemberInfo(conversationID, memberID) - returns accountID, toonID, name
        BNGetCustomMessageTable(table)
        BNGetFOFInfo(presenceID, mutual, non-mutual, index) - returns presenceID, givenName, surname, isFriend
        BNGetFriendInfo(friendIndex) - Returns BNet ID, real name, character name, character ID, game client, connected, status, broadcast and note of the friend
        BNGetFriendInfoByID(presenceID) - returns presenceID, givenName, surname, toonName
        BNGetFriendInviteInfo(menuValue) - returns presenceID, givenName, surname
        BNGetFriendToonInfo(friendIndex, toonIndex)
        BNGetInfo() - returns presenceID, toonID, currentBroadcast, bnetAFK, bnetDND
        BNGetMatureLanguageFilter()
        BNGetMaxPlayersInConversation()
        BNGetNumBlocked()
        BNGetNumBlockedToons()
        BNGetNumConversationMembers(conversationID)
        BNGetNumFOF(ID,mutual,non)
        BNGetFOFInfo(ID, mutual, non, index)
        BNGetNumFriendInvites()
        BNGetNumFriends() - returns numBNetTotal, numBNetOnline
        BNGetNumFriendToons(index)
        BNGetSelectedBlock()
        BNGetSelectedFriend()
        BNGetSelectedToonBlock()
        BNGetToonInfo(toonID) - returns hasFocus, toonName, client, realmName, faction, race, class, guild, zoneName, level, gameText
        BNInviteToConversation(target, player)
        BNIsBlocked(ID)
        BNIsFriend(presenceID)
        BNIsSelf(presenceID) - Returns true if the specified presenceID is your own, false otherwise.
        BNIsToonBlocked(ID)
        BNLeaveConversation(channel)
        BNListConversation(channel)
        BNRemoveFriend(ID)
        BNReportFriendInvite(ID)
        BNReportPlayer(presenceID, type, comments)
        BNSendConversationMessage(channel,text)
        BNSendFriendInvite(text, noteText)
        BNSendFriendInviteByID(ID, noteText)
        BNSendWhisper(id,text)
        BNSetAFK()
        BNSetBlocked(ID, bool)
        BNSetCustomMessage(text)
        BNSetDND()
        BNSetFocus()
        BNSetFriendNote(ID, noteText)
        BNSetMatureLanguageFilter(bool)
        BNSetSelectedBlock(index)
        BNSetSelectedFriend(index)
        BNSetSelectedToonBlock(index)
        BNSetToonBlocked(ID, bool)
        IsBNLogin()
        CanCooperateWithToon(toonID)


Recruit-a-Friend


Note: Only usable by people that have been referred or have referred someone.


        AcceptLevelGrant() - Accepts a level grant proposal.
        DeclineLevelGrant() - Declines a level grant proposal.
        IsReferAFriendLinked("unit") - Returns whether the unit is linked to the player via RaF.
        CanGrantLevel("unit") - Returns whether you can grant levels to a particular player.
        GrantLevel("unit", level) - Grant a custom amount of levels to a RaF-linked player.
        CanSummonFriend("unit") - Returns whether you can RaF summon a particular unit.
        SummonFriend("unit") - Summons a player using the RaF system.
        GetSummonFriendCooldown() - Returns the cooldown (start, duration) of the RaF Summon Friend ability.


Script Profiling


Note: CPU profiling is disabled by default since it has some overhead. CPU profiling is controlled by the scriptProfile CVar, which persists across sessions, and takes effect after a UI reload. Memory profiling is always available. These functions were added in Patch 2.1.


        GetAddOnCPUUsage(index or "name") - Returns the total time used by the specified AddOn. This returns a cached value calculated by UpdateAddOnCPUUsage().
        GetAddOnMemoryUsage(index or "name") - query an addon's memory use (in K, precision to 1 byte) - This returns a cached value calculated by UpdateAddOnMemoryUsage().
        GetEventCPUUsage(["event"]) - Returns the time used and number of times the specified event has been triggered. If 'event' is omitted, the time and count will be totals across all events.
        GetFrameCPUUsage(frame[, includeChildren]) - Returns the time used and number of function calls of any of the frame's script handlers. If 'includeChildren' is true or omitted, the time and call count will include the handlers for all of the frame's children as well.
        GetFunctionCPUUsage(function[, includeSubroutines]) - Returns the time used and number of times the specified function was called. If 'includeSubroutines' is true or omitted, the time includes both the time spent in the function and subroutines called by the function. If it is false, then time is only the time actually spent by the code in the function itself.
        GetScriptCPUUsage() - Returns the total time used by the scripting system
        ResetCPUUsage() - Reset all CPU profiling statistics to zero.
        UpdateAddOnCPUUsage() - Scan through the profiling data and update the per-addon statistics
        UpdateAddOnMemoryUsage() - Scan through memory profiling data and update the per-addon statistics


Security / Protection


        issecure() - Determine if the current environment is secure.
        forceinsecure() - Taint the current execution path.
        issecurevariable([table,] "name") - Determine if the specified variable is secure.
        securecall(function or "functionName", ...) - Call a function from a secure environment without risking secure status.
        hooksecurefunc([table,] "functionName", hookfunc) - Creates a secure 'post hook' for the named function. The hookfunc is invoked after the original function, and receives the same parameters. Return values from hookfunc are discarded. This is the only safe way to hook functions that execute protected functionality.
        InCombatLockdown() - Returns true if the in-combat AddOn restrictions are active.
        scrub(...) - returns the argument list with non-number/boolean/string values changed to nil.


Settings


        CombatTextSetActiveUnit(unit) - changes the entity for which COMBAT_TEXT_UPDATE events fire.
        DownloadSettings() - Download a backup of your settings from the server.
        GetCVar("cVar") - Returns the current value of a console variable.
        GetCVarDefault("cVar") - Returns the default value of a console variable.
        GetCVarBool("cVar") - Returns the value of the cvar as 1 or nil instead of requiring you to compare the cvar value with "0" or "1"
        GetCVarInfo("cVar") - returns name, defaultValue, serverStoredAccountWide, serverStoredPerCharacter
        GetCurrentMultisampleFormat() - Get the current in-use multi-sample (antialias) format.
        GetCurrentResolution() - Get the index of the current screen resolution.
        GetGamma()
        GetMultisampleFormats() - Get the available multi-sample (antialias) formats..
        GetRefreshRates(x)
        GetScreenResolutions()
        GetVideoCaps()
        IsThreatWarningEnabled() - returns whether threat warnings should currently be displayed.
        RegisterCVar("cVar"[, value]) - Registers a variable for use with the #GetCVar and #SetCVar functions.
        ResetPerformanceValues()
        ResetTutorials()
        SetCVar("cVar", value[, "scriptCVar"]) - Set the value of a variable in config.wtf
        SetEuropeanNumbers(flag) - Sets the decimal separator to a comma instead of a dot
        SetGamma(value)
        SetLayoutMode()
        SetMultisampleFormat(index) - Set the multi-sample (antialias) format to use.
        SetScreenResolution(x)
        ShowCloak(flag) - Set whether player's cloak is displayed.
        ShowHelm(flag) - Set whether player's helm is displayed.
        ShowNumericThreat() - Returns 1 if detailed threat information should be shown on unit frames.
        ShowingCloak() - Return 1 if player's cloak is displayed, nil otherwise.
        ShowingHelm() - Return 1 if player's helm is displayed, nil otherwise.
        UploadSettings() - Uploads a backup of your settings to the server.


Spell


The 'spellID' is the index of a spell in a spellbook. The indices increase from top to bottom, then left to right, then between categories, e.g.: General -> Discipline. spellIDs will change as players learn new spells and 'professions'.


        PROTECTED CastShapeshiftForm(index)
        PROTECTED CastSpell(spellID, "bookType") - Cast the specified spell by ID. spellbookTab is "spell" or "pet". As of patch 2.0, this function has been restricted to Blizzard signed UI mods. Note: You can still use this function to open Craft windows and activate Lock Picking. (protected 2.0)
        PROTECTED CastSpellByName("name"[, onSelf]) - Cast the specified spell by display name. As of patch 2.0, this function has been restricted to Blizzard signed UI mods. Note: You can still use this function to open Craft windows and activate Lock Picking. (protected 2.0)
        GetMultiCastTotemSpells(totemslot) - Returns a list of spellIDs that are applicable for the specified totem slot (1-4) (added 3.2)
        GetNumShapeshiftForms()
        GetNumSpellTabs() - Returns the total number of tabs in the user's spellbook.
        GetQuestLogRewardSpell
        GetRewardSpell
        GetShapeshiftForm(unknown) - returns zero-based index of current form/stance
        GetShapeshiftFormCooldown(index)
        GetShapeshiftFormInfo(index) - Retrieves information about an available ShapeshiftForm or Stance.
        GetSpellAutocast("spellName" | spellId, bookType) - Check whether the specified spell autocasts or not.
        GetSpellBookItemInfo(spellID, "bookType") - Returns the spell's type and spellID for a spell in the player's spellbook.
        GetSpellBookItemName(spellID, "bookType") - Returns the spell name and spell rank for a spell in the player's spellbook.
        GetSpellCooldown(spellName | spellID, "bookType") - Retrieves data on the cooldown of a specific spell.
        GetSpellDescription(spellID) - Retrieves the description text of a specific spell (enhanced tooltip text).
        GetSpellInfo (spellId | spellName | spellLink) - Returns the spell's info, including name, cost, icon, cast time, and range.
        GetSpellLink (spellName, spellRank) - Returns the spell's link. (added 2.4)
        GetSpellTabInfo(spellbookTabNum) - Returns information about the specified spellbook tab.
        GetSpellTexture(spellName | spellID, "bookType") - Returns the texture used for the spell's icon.
        GetTotemInfo(slot) - Returns information about a totem.
        GetSpellPowerCost(spellID) - Returns information about spell's resource cost (mana/focus/etc.), in the form of tables describing each resource.
        IsAttackSpell(spell) - Returns 1 if the spell is the "Attack" spell.
        IsAutoRepeatSpell(spell)
        IsPassiveSpell(spellID, "bookType") - Returns whether the icon in your spellbook is a Passive ability. Formerly IsSpellPassive(spell).
        IsSpellInRange("spellName", [unit]) - Is nil for no valid target, 0 for out of range, 1 for in range.
        IsUsableSpell(spell)
        PickupSpell("spellName" | spellID, "bookType") - Loads an action button onto the cursor to be dropped into a quickbar slot.
        UI QueryCastSequence("sequence") - Returns index, item, spell for the spell/item that will be used next if the cast sequence is executed.
        PROTECTED SetMultiCastSpell(actionID,spellID) - Assigns a spellID to a multicast (totem bar) actionID (added 3.2)
        SpellCanTargetUnit("unit") - Returns true if the spell awaiting target selection can be cast on the specified unit.
        SpellHasRange(spell) - Returns true if the specified spell has a ranged effect (i.e. requires a target).
        SpellIsTargeting() - Returns true if a spell has been cast and is awaiting target selection.
        PROTECTED SpellStopCasting() - Stops the current spellcast.
        PROTECTED SpellStopTargeting() - Cancels the spell awaiting target selection.
        PROTECTED SpellTargetUnit("unit") - Casts the spell awaiting target selection on the specified unit.
        PROTECTED ToggleSpellAutocast("spellName" | spellId, bookType) - Toggles whether the specified spell should autocast or not.
        UnitCastingInfo("unit") - Returns spellName, nameSubtext, text, texture, startTime, endTime, isTradeSkill, castID, interrupt .
        UnitChannelInfo("unit") - Returns spellName, nameSubtext, text, texture, startTime, endTime, isTradeSkill, interrupt .


System


        ConsoleExec("command") - Execute a console command.
        DetectWowMouse() - Attempts to detect the world of warcraft MMO mouse.
        GetBuildInfo() - Returns information about current client build.
        geterrorhandler() - Returns the currently set error handler.
        GetCurrentKeyBoardFocus() - Returns the [editbox] widget currently handling keyboard events.
        GetExistingLocales() - Returns a list of installed language packs.
        GetFramerate() - Returns the current framerate (full precision)
        GetGameTime() - Returns the time in-game.
        GetLocale() - Returns client locale, example 'enUS'.
        GetCursorPosition() - Returns the cursor's position on the screen.
        GetNetStats() - Get bandwidth and latency network information.
        GetRealmName() - returns the name of the server a user is logged in to
        GetScreenHeight() - Returns the height of the window in pixels.
        GetScreenWidth() - Returns the width of the window in pixels.
        UI GetText() - Used to localize some client text.
        GetTime() - Returns the system uptime in seconds (millisecond precision).
        IsAltKeyDown() - Returns true if the alt key is currently depressed.
        InCinematic()
        IsControlKeyDown() - Returns true if the control key is currently depressed.
        IsDebugBuild()
        IsDesaturateSupported()
        IsLeftAltKeyDown() - Returns true if the left alt key is currently depressed.
        IsLeftControlKeyDown() - Returns true if the left control key is currently depressed.
        IsLeftShiftKeyDown() - Returns true if the left shift key is currently depressed.
        IsLinuxClient() - Boolean - Returns true if WoW is being run on Linux.
        IsLoggedIn() - Returns nil before the PLAYER_LOGIN event has fired, 1 afterwards.
        IsMacClient() - Returns true if WoW is being run on Mac.
        IsRightAltKeyDown() - Returns true if the right alt key is currently depressed.
        IsRightControlKeyDown() - Returns true if the right control key is currently depressed.
        IsRightShiftKeyDown() - Returns true if the right shift key is currently depressed.
        IsShiftKeyDown() - Returns true if the shift key is currently depressed.
        IsStereoVideoAvailable() - (added 3.0.8)
        IsWindowsClient() - Returns true if WoW is being run on Windows.
        OpeningCinematic() - Shows the opening movie for a player's race
        PlayMusic() - Plays the specified mp3.
        PlaySound() - Plays the specified built-in sound effect.
        PlaySoundFile() - Plays the specified sound file.
        HW ReloadUI() - Reloads the UI from source files
        RepopMe() - The "Release Spirit" button. Sends you to the graveyard when dead.
        RequestTimePlayed() - Request a summary of time played from the server.
        RestartGx() - Restarts the graphical engine. Needed for things such as resolution changes to take effect.
        RunScript("script") - Execute "script" as a block of Lua code.
        Screenshot() - Takes a screenshot.
        UI SecondsToTime - Converts a number of seconds into a readable days / hours / etc. formatted string.
        SetAutoDeclineGuildInvites(value) - Set the checkbox option for blocking guild invites (value may be 0 or 1)
        seterrorhandler(function) - Set the error handler to the given parameter.
        StopCinematic()
        StopMusic() - Stops the currently playing mp3.
        UI UIParentLoadAddOn("AddOnName") - Loads or Reloads the specified AddOn, and pops up an error message if it fails to load for any reason.
        UI TakeScreenshot() - Takes a screenshot.
        UI ERRORMESSAGE(value) - Displays the script error dialog with optional text
        debuginfo() - Output win32 debug text. Freeware debug message viewer: DebugView (Has no effect on live server.)
        UI message("text") - Displays a message box with your text message and an "Okay" button.


Specialization


        GetActiveSpecGroup() - Returns the index of the current active talent group for the player. (added 5.0.4)
        SetActiveSpecGroup() - Changes the active specialization/talents/glyphs group (dual-spec). (added 5.0.4)
        GetNumSpecGroups() - Returns the number of specialization group (dual specs) the player has. (added 5.0.4)
        GetSpecialization([ isInspect [, isPet] [, specGroup] ]) - Returns the index of the player's current specialization. (added 5.0.4)
        GetNumUnspentTalents() - Returns the number of unspent talents. (added 5.0.4)
        GetNumSpecializations([inspect[,pet]]) - Returns the number of available specializations. (added 5.0.4)
        GetSpecializationInfo(tabIndex[,inspect][,isPet][, groupIndex]) - Returns information about the player's specializations. (added 5.0.4)
        GetSpecializationInfoByID(specID) - Returns information about the specialization ID. (added 5.0.4)
        GetSpecializationRole(specIndex[, isInspect[, isPet]) - Returns the role a specialization is intended to perform. (added 5.0.4)


Talent


        BuyTrainerService(index) - Used for buying new/upgrading professions, profession items and class skills.
        CheckTalentMasterDist() - Returns nil if the player is too far away from the talent master to use the talent methods.
        ConfirmTalentWipe() - Confirms freeing all talent points.
        GetNumTalents(tabIndex) - return number of talents in tree.
        GetTalentInfo(tabIndex,talentIndex[,inspect][,isPet][,groupIndex]) - return name, iconTexture, tier, column, rank, maxRank, isExceptional, meetsPrereq. (added 'inspect' 2.3)(added 'isPet' 2.3)(added 'groupIndex' 3.1.0)
        GetTalentLink(tabIndex,talentIndex[,isInspect][,isPet][,groupIndex][, isPreview]) - Returns the talent link. (added 2.4) [,isInspect][,isPet] (added 3.0.1)(added 'groupIndex' 3.1.0)(added 'isPreview' 3.1.0)
        GetTalentPrereqs(tabIndex,talentIndex[, inspect][, groupIndex]) - return tier, column, isLearnable. (added 'inspect' 2.3)(added 'groupIndex' 3.1)
        LearnTalent(tabIndex,talentIndex) - Learns a talent from the talent tree.


Talent points preview, assignment before spending, was added in 3.1.0:


        AddPreviewTalentPoints(tabIndex, talentIndex, points[, isPet[, groupIndex]]) - Add talent points to the previewed talent build.
        GetGroupPreviewTalentPointsSpent(isPet[, groupIndex]) - Returns the total number of points spent in a spec.
        GetPreviewTalentPointsSpent(tabIndex, isPet [,groupIndex]) - Returns the number of points spent.
        REMOVED GetUnspentTalentPoints([isInspect [,isPet)]] - Returns the number of unspent talent points. (removed 5.0.4)
        LearnPreviewTalents(isPet) - Learns currently previewed talents.
        ResetGroupPreviewTalentPoints(isPet[,groupIndex]) - Unassigns all preview talent points.
        ResetPreviewTalentPoints(tabIndex, isPet [,groupIndex]) - Unassigns preview talent points in a specific tab.


Targeting


        PROTECTED AssistUnit("unit") - Instructs your character to assist the specified unit.
        PROTECTED AttackTarget() - Attacks the targetted unit.
        PROTECTED ClearTarget() - Clears the selected target.
        ClickTargetTradeButton(index)
        PROTECTED TargetLastEnemy() - Selects the last targetted enemy as the current target.
        PROTECTED TargetLastTarget() - Selects the last target as the current target.
        PROTECTED TargetNearestEnemy([reverseFlag]) - Selects the nearest enemy as the current target.
        PROTECTED TargetNearestEnemyPlayer([reverseFlag]) - Selects the nearest enemy player as the current target.
        PROTECTED TargetNearestFriend([reverseFlag]) - Selects the nearest friendly unit as the current target.
        PROTECTED TargetNearestFriendPlayer([reverseFlag]) - Selects the nearest friendly player as the current target.
        PROTECTED TargetNearestPartyMember() - Selects the nearest Party member as the current target.
        PROTECTED TargetNearestRaidMember() - Selects the nearest Raid member as the current target.
        PROTECTED TargetUnit("unit") - Selects the specified unit as the current target.


Taxi


        CloseTaxiMap() - Closes the Flightpath Map.
        DrawRouteLine(texture, canvas, startx, starty, endx, endy, width, relPoint) - Draws a line.
        GetNumRoutes(slot) - Gets the number of hops between current-slot and slot.
        NumTaxiNodes() - Returns the number of nodes (flight paths) on an open taxi map.
        SetTaxiMap(frame)
        TakeTaxiNode(slot) - Takes the named taxi node.
        TaxiNodeCost(slot) - Returns the cost in copper of a node.
        TaxiNodeGetType(slot) - Returns the status of a node.
        TaxiGetSrcX(slot, hop)
        TaxiGetSrcY(slot, hop)
        TaxiGetDestX(slot, hop)
        TaxiGetDestY(slot, hop)
        TaxiNodeSetCurrent(slot) - Renumbers slots based on new current slot.
        TaxiNodeName(slot) - Returns the name of a node.
        TaxiNodePosition(slot) - Returns position (x,y) of node on the map.
        UnitOnTaxi("unit") - Returns 1 if unit is on a taxi.


Toggle


        UI ToggleBackpack() - Toggles your backpack open/closed.
        UI ToggleBag(bagID) - Opens or closes the specified bag.
        UI OpenAllBags - Open all bags
        UI ToggleCharacter(index) - Toggles the character pane to the specified frame.
        UI ToggleFramerate - Show/Hide the FPS.
        UI ToggleFriendsFrame([tabNumber]) - Opens/closes the friends pane (possibly on a specific tab).
        PROTECTED UI ToggleGameMenu - Opens/closes the game menu. Triggers protected functions.
        UI ToggleHelpFrame - Opens the Help Request frame.
        UI ToggleKeyRing - Opens/closes the key ring.
        UI ToggleMinimap - Turns the minimap display on/off.
        UI TogglePVPFrame - Opens/closes the PvP frame.
        UI ToggleSpellBook("bookType") - Shows the spellbook. Can show your spells or your pet's.
        UI ToggleTalentFrame - Opens the Talent frame.
        UI ToggleAchievementFrame - Shows the achievements frame.


TradeSkill


        CloseTradeSkill() - Closes an open trade skill window.
        CollapseTradeSkillSubClass(index) - Collapses the specified subclass header row.
        DoTradeSkill(index[, repeatTimes]) - Performs the tradeskill a specified # of times.
        ExpandTradeSkillSubClass(index) - Expands the specified subclass header row.
        GetFirstTradeSkill() - Returns the index of the first non-header trade skill entry.
        GetNumTradeSkills() - Get the number of trade skill entries (including headers).
        GetTradeSkillCooldown(index) - Returns the number of seconds left for a skill to cooldown.
        GetTradeSkillDescription(index) - Returns the description text of the indicated trade skill.
        GetTradeSkillIcon(index) - Returns the texture name of a tradeskill's icon.
        GetTradeSkillInfo(index) - Retrieves information about a specific trade skill.
        GetTradeSkillInvSlotFilter(slotIndex) - Returns 1 if items corresponding to slotIndex are currently visible, otherwise nil.
        GetTradeSkillInvSlots() - Returns a list of the available inventory slot types.
        GetTradeSkillItemLink(index) - Returns the itemLink for a trade skill item.
        GetTradeSkillLine() - Returns information about the selected skill line.
        GetTradeSkillListLink() - Returns the TradeSkillLink for a trade skill.
        GetTradeSkillNumMade(index) - Gets the number of items made in a single use of a skill.
        GetTradeSkillNumReagents(tradeSkillRecipeId) - Returns the number of different reagents required.
        GetTradeSkillReagentInfo(tradeSkillRecipeId, reagentId) - Returns data on the reagent, including a count of the player's inventory.
        GetTradeSkillReagentItemLink(index, reagentId) - Returns the itemLink for one of the reagents needed to craft the given item
        GetTradeSkillRecipeLink(index) - Returns the EnchantLink for a trade skill.
        GetTradeSkillSelectionIndex() - Returns the Id of the currently selected trade skill, 0 if none selected.
        GetTradeSkillSubClassFilter(filterIndex) - Returns 1 if items corresponding to filterIndex are currently visible, otherwise nil.
        GetTradeSkillSubClasses() - Returns a list of the valid subclasses.
        GetTradeSkillTools(index) - Returns information about the tools needed for a tradeskill.
        GetTradeskillRepeatCount() - Returns the number of times the current item is being crafted.
        IsTradeskillTrainer() - Returns 1 if trainer is for a tradeskill.
        IsTradeSkillLinked() - Returns true if you're inspecting a tradeskill link rather then looking at your own tradeskills
        SelectTradeSkill(index) - Select a specific trade skill in the list.
        SetTradeSkillInvSlotFilter(slotIndex, onOff[, exclusive] ) - Set the inventory slot type filter.
        SetTradeSkillSubClassFilter(slotIndex, onOff[, exclusive] ) - Set the subclass filter.
        StopTradeSkillRepeat() - Stops creating additional queued items.
        TradeSkillOnlyShowMakeable(onlyMakable) - Controls whether only recipes you have the reagents to craft are shown.


Tracking


        GetNumTrackingTypes() - Returns number of available tracking methods.
        GetTrackingInfo(id) - Retrieves tracking information from specified id.
        SetTracking(id) - Selects a tracking method.


Trading


        HW AcceptTrade() - A pending trade will be accepted.
        AddTradeMoney() - Adds the money dropped into the player's trade frame.
        CancelTrade() - Declines the offer to trade with the other player.
        CancelTradeAccept() - Cancels the trade attempt which required an accept.
        ClickTargetTradeButton(index)
        ClickTradeButton(index) - Equivalent of a mouseclick on the trade window buttons [1-7]
        CloseTrade() - Closes the trade.
        GetPlayerTradeMoney - Returns the amount of money the player has in the trade window.
        GetTargetTradeMoney - Returns the amount of money in the trade frame of the target player.
        GetTradePlayerItemInfo(id) - Returns information about a trade item.
        GetTradePlayerItemLink(id) - Returns an itemLink for the given item on your side of the trade window, if open.
        GetTradeTargetItemInfo(id) - Returns information about a trade item.
        GetTradeTargetItemLink(id) - Returns an itemLink for the given item on the other player's side of the trade window, if open.
        InitiateTrade(UnitId) - Asks the specified unit to trade.
        PickupPlayerMoney(copper) - Picks up an amount of money from the player.
        PickupTradeMoney(copper) - Picks up an amount of money from the player's trade offer.
        SetTradeMoney(copper) - Sets the amount of money offered as part of the player's trade offer.
        ReplaceTradeEnchant() - Confirm the replacement of an enchantment via trade.


Training


        BuyTrainerService(index) - Used for buying new/upgrading professions, profession items and class skills.
        CloseTrainer() - Closes the trainer window.
        GetNumTrainerServices() - Get the number of the trainer services.
        GetTrainerGreetingText() - Get the trainer's greeting text.
        GetTrainerSelectionIndex() - Get the index of the selected trainer service.
        GetTrainerServiceAbilityReq(trainerIndex,reqIndex) - Used for displaying the requirements to learn a new profession, profession skill or class skill.
        GetTrainerServiceCost(index) - Returns the cost of a specific trainer service.
        GetTrainerServiceDescription(index) - Returns the description of a specific trainer service.
        GetTrainerServiceIcon(index) - Returns icon texture for a trainer service.
        GetTrainerServiceInfo(index) - Returns information about a trainer service.
        GetTrainerServiceItemLink(index) - Returns an item link for a trainer service.
        GetTrainerServiceLevelReq(index) - Get the required level to learn the skill.
        GetTrainerServiceNumAbilityReq - Get the maximum number of requirements that #GetTrainerServiceAbilityReq() has.
        GetTrainerServiceSkillLine(index)
        GetTrainerServiceSkillReq(index) - Returns a String and Variable for the requirements of a specific trainer service.
        GetTrainerServiceTypeFilter("filter") - Returns the status of a skill filter in the trainer window.
        IsTradeskillTrainer() - Returns 1 if trainer is for a tradeskill.
        OpenTrainer()
        SelectTrainerService()
        SetTrainerServiceTypeFilter("filter",state) - Sets the status of a skill filter in the trainer window.


Unit


These are functions which act on one or more units. Units are identified by UnitIds.


        PROTECTED AssistUnit("unit") - Instructs your character to assist the specified unit.
        CheckInteractDistance("unit",distIndex)
        DropItemOnUnit("unit") - Drops an item from the cursor onto a unit.
        FollowUnit("unit") - Follow an ally with the specified UnitID
        PROTECTED FocusUnit("unit") - Sets your unit for focus. (protected 2.0)
        PROTECTED ClearFocus() - Removes any focus you may have set.
        UI GetUnitName("unit", showServerName) - Returns a string with the unit's name and realm name if applicable.
        GetUnitPitch("unit") - Returns the moving pitch of the unit. (added 3.0.2)
        GetUnitSpeed("unit") - Returns the moving speed of the unit. (added 3.0.2)
        InviteUnit("name" or "unit") - Invites the specified player to the group you are currently in (added 2.0)
        IsUnitOnQuest(questIndex, "unit") - Determine if the specified unit is on the given quest.
        SpellCanTargetUnit("unit") - Returns true if the spell awaiting target selection can be cast on the specified unit.
        PROTECTED SpellTargetUnit("unit") - Casts the spell awaiting target selection on the specified unit.
        PROTECTED TargetUnit("unit") - Selects the specified unit as the current target. (protected 2.0)
        UnitAffectingCombat("unit") - Determine if the unit is in combat or has aggro. returns nil if "false" and 1 if "true".
        UnitArmor("unit") - Returns the armor statistics relevant to the specified unit.
        UnitAttackBothHands("unit") - Returns information about the unit's melee attacks.
        UnitAttackPower("unit") - Returns the unit's melee attack power and modifiers.
        UnitAttackSpeed("unit") - Returns the unit's melee attack speed for each hand.
        UnitAura("unit", index [, filter]) - Returns info about buffs and debuffs of a unit.
        UnitBuff("unit", index [,raidFilter]) - Retrieves info about a buff of a certain unit. (updated 2.0)
        UnitCanAssist("unit", "otherUnit") - Indicates whether the first unit can assist the second unit.
        UnitCanAttack("unit", "otherUnit") - Returns true if the first unit can attack the second, false otherwise.
        UnitCanCooperate("unit", "otherUnit") - Returns true if the first unit can cooperate with the second, false otherwise.
        UnitClass("unit") - Returns the class name of the specified unit (e.g., "Warrior" or "Shaman").
        UnitClassification("unit") - Returns the classification of the specified unit (e.g., "elite" or "worldboss").
        UnitCreatureFamily("unit") - Returns the type of creature of the specified unit (e.g., "Crab").
        UnitCreatureType("unit") - Returns the classification type of creature of the specified unit (e.g., "Beast").
        UnitDamage("unit") - Returns the damage statistics relevant to the specified unit.
        UnitDebuff("unit", index [,raidFilter]) - Retrieves info about a debuff of a certain unit. (updated 2.0)
        UnitDefense("unit") - Returns the base defense skill of the specified unit.
        UnitDetailedThreatSituation("unit", "mob") - Returns detailed information about the specified unit's threat on a mob. (added 3.0)
        UnitExists("unit") - Returns 1 if the specified unit exists, nil otherwise.
        UnitFactionGroup("unit") - Returns the faction group id and name of the specified unit. (eg. "Alliance") - string returned is localization-independent (used in filepath)
        UnitGroupRolesAssigned("unit") - Returns the assigned role in a group formed via the Dungeon Finder Tool. (added 3.3)
        UnitGUID("unit") - Returns the GUID as a string for the specified unit matching the GUIDs used by the new combat logs. (added 2.4)
        GetPlayerInfoByGUID("guid") - returns race, class, sex about the guid. client must have seen the guid. (added 3.2)
        UnitHasLFGDeserter("unit") - Returns whether the unit is currently unable to use the dungeon finder due to leaving a group prematurely. (added 3.3.3)
        UnitHasLFGRandomCooldown("unit") - Returns whether the unit is currently under the effects of the random dungeon cooldown. (added 3.3.3)
        UnitHasRelicSlot("unit")
        UnitHealth("unit") - Returns the current health, in points, of the specified unit.
        UnitHealthMax("unit") - Returns the maximum health, in points, of the specified unit.
        UnitInParty("unit") - Returns true if the unit is a member of your party.
        UnitInRaid("unit") - Returns the unit index if the unit is in your raid/battlegroud, nil otherwise.
        UnitInBattleground("unit") - Returns the unit index if the unit is in your battleground, nil otherwise.
        UnitIsInMyGuild("unit") - Returns whether the specified unit is in the same guild as the player's character.
        UnitInRange("unit") - Returns true if the unit (party or raid only) is in range of a typical spell such as flash heal. (added 2.4))
        UnitIsAFK("unit") - Only works for friendly units.
        UnitIsCharmed("unit") - Returns true if the specified unit is charmed, false otherwise.
        UnitIsConnected("unit") - Returns 1 if the specified unit is connected or npc, nil if offline or not a valid unit.
        UnitIsCorpse("unit") - Returns true if the specified unit is a corpse, false otherwise.
        UnitIsDead("unit") - Returns true if the specified unit is dead, nil otherwise.
        UnitIsDeadOrGhost("unit") - Returns true if the specified unit is dead or a ghost, nil otherwise.
        UnitIsDND("unit") - Only works for friendly units.
        UnitIsEnemy("unit", "otherUnit") - Returns true if the specified units are enemies, false otherwise.
        UnitIsFeignDeath("unit") - Returns true if the specified unit (must be a member of your group) is feigning death. (added 2.1)
        UnitIsFriend("unit", "otherUnit") - Returns true if the specified units are friends (PC of same faction or friendly NPC), false otherwise.
        UnitIsGhost("unit") - Returns true if the specified unit is a ghost, false otherwise.
        UnitIsPVP("unit") - Returns true if the specified unit is flagged for PVP, false otherwise.
        UnitIsPVPFreeForAll("unit") - Returns true if the specified unit is flagged for free-for-all PVP, false otherwise.
        UnitIsPVPSanctuary("unit") - Returns whether the unit is in a PvP sanctuary, and therefore cannot be attacked by other players.
        UnitIsPlayer("unit") - Returns true if the specified unit is a player character, false otherwise.
        UnitIsPossessed("unit") - Returns whether the specified unit is currently under control of another (i.e. "pet" when casting Mind Control).
        UnitIsSameServer("unit", "otherUnit") - Returns whether the specified units are from the same server.
        UnitIsTapped("unit") - Returns true if the specified unit is tapped, false otherwise.
        UnitIsTappedByPlayer("unit") - Returns true if the specified unit is tapped by the player himself, otherwise false.
        UnitIsTappedByAllThreatList("unit") - Returns whether the specified unit is a community monster, i.e. whether all players engaged in combat with it will receive kill (quest) credit.
        UnitIsTrivial("unit") - Returns true if the specified unit is trivial (Trivial means the unit is "grey" to the player. false otherwise.
        UnitIsUnit("unit", "otherUnit") - Determine if two units are the same unit.
        UnitIsVisible("unit") - 1 if visible, nil if not
        UnitLevel("unit") - Returns the level of a unit.
        UnitMana("unit") - Returns the current mana (or energy,rage,etc), in points, of the specified unit. (replaced by 'UnitPower' 3.0.2)
        UnitManaMax("unit") - Returns the maximum mana (or energy,rage,etc), in points, of the specified unit. (replaced by 'UnitPowerMax' 3.0.2)
        UnitName("unit") - Returns the name (and realm name) of a unit.
        UnitOnTaxi("unit") - Returns 1 if unit is on a taxi.
        UnitPlayerControlled("unit") - Returns true if the specified unit is controlled by a player, false otherwise.
        UnitPlayerOrPetInParty("unit") - Returns 1 if the specified unit/pet is a member of the player's party, nil otherwise (returns nil for "player" and "pet") (added 1.12)
        UnitPlayerOrPetInRaid("unit") - Returns 1 if the specified unit/pet is a member of the player's raid, nil otherwise (returns nil for "player" and "pet") (added 1.12)
        UnitPVPName("unit") - Returns unit's name with PvP rank prefix (e.g., "Corporal Allianceguy").
        UnitPVPRank("unit") - Get PvP rank information for requested unit.
        UnitPower("unit"[,type]) - Returns current power of the specified unit. (replaced 'UnitMana' 3.0.2)
        UnitPowerMax("unit"[,type]) - Returns max power of the specified unit. (replaced 'UnitManaMax' 3.0.2)
        UnitPowerType("unit") - Returns a number corresponding to the power type (e.g., mana, rage or energy) of the specified unit.
        UnitRace("unit") - Returns the race name of the specified unit (e.g., "Human" or "Troll").
        UnitRangedAttack("unit") - Returns the ranged attack number of the unit.
        UnitRangedAttackPower("unit") - Returns the ranged attack power of the unit.
        UnitRangedDamage("unit") - Returns the ranged attack speed and damage of the unit.
        UnitReaction("unit", "otherUnit") - Returns a number corresponding to the reaction (aggressive, neutral or friendly) of the first unit towards the second unit.
        UnitResistance("unit", "resistanceIndex") - Returns the resistance statistics relevant to the specified unit and resistance type.
        UnitSelectionColor(UnitId) - Returns RGBA values for the color of a unit's name.
        UnitSex("unit") - Returns a code indicating the gender of the specified unit, if known. (1=unknown, 2=male, 3=female) (updated 1.11)
        UnitStat("unit", statIndex) - Returns the statistics relevant to the specified unit and basic attribute (e.g., strength or intellect).
        UnitThreatSituation("unit", "mob") - Returns the specified unit's threat status on a mob. (added 3.0)
        UnitUsingVehicle("unit") - Returns whether the specified unit is currently using a vehicle (including transitioning between seats).
        GetThreatStatusColor(status) - Returns RGB values for a given UnitThreatSituation return value.
        UnitXP("unit") - Returns the number of experience points the specified unit has in their current level. (only works on your player)
        UnitXPMax("unit") - Returns the number of experience points the specified unit needs to reach their next level. (only works on your player)
        SetPortraitTexture(texture,"unit") - Paint a Texture object with the specified unit's portrait.
        SetPortraitToTexture(texture or "texture", "texturePath") - Sets the texture to be displayed from a file applying a circular opacity mask making it look round like portraits.


Vehicle


These functions were added in Patch 3.0.2.


        CanExitVehicle() - Returns 1 if the player can be exit the Vehicle.
        CanSwitchVehicleSeats() - Returns 1 if the player can Switch Seats in the Vehicle
        CanEjectPassengerFromSeat(seat) - Returns 1 if the player can eject a passenger from a seat.
        GetBattlefieldVehicleInfo(index)
        GetNumBattlefieldVehicles(index)
        EjectPassengerFromSeat(seat) - Ejects a passenger from a seat.
        IsUsingVehicleControls()
        IsUsingVehicleControls()
        IsVehicleAimAngleAdjustable() - Returns 1 if the player can adjust the Aim Angle of the Vehicle.
        IsVehicleAimPowerAdjustable() - Returns 1 if the player can adjust the Aim Power of the Vehicle.
        UnitControllingVehicle(unit)
        UnitHasVehicleUI(unit)
        UnitInVehicle(unit)
        UnitInVehicleControlSeat(unit)
        UnitSwitchToVehicleSeat(unit, seatId)
        UnitTargetsVehicleInRaidUI(unit)
        UnitVehicleSeatCount(unit)
        UnitVehicleSeatInfo(unit, seatId)
        UnitVehicleSkin(unit)
        VehicleAimDecrement()
        VehicleAimDownStart()
        VehicleAimDownStop()
        VehicleAimGetAngle()
        VehicleAimGetNormAngle()
        VehicleAimGetNormPower()
        VehicleAimIncrement()
        VehicleAimRequestAngle()
        VehicleAimRequestNormAngle()
        VehicleAimSetNormPower()
        VehicleAimUpStart()
        VehicleAimUpStop()
        VehicleCameraZoomIn(amount)
        VehicleCameraZoomOut(amount)
        VehicleExit() - Exit the current Vehicle
        VehicleNextSeat()
        VehiclePrevSeat()


Voice Chat


These functions were added in Patch 2.2.


        AddMute("name")
        AddOrDelMute("unit")
        ChannelSilenceAll()
        ChannelSilenceVoice()
        ChannelUnSilenceAll()
        ChannelUnSilenceVoice()
        ChannelVoiceOff()
        ChannelVoiceOn()
        DelMute("name")
        DisplayChannelVoiceOff()
        DisplayChannelVoiceOn()
        GetActiveVoiceChannel()
        GetChannelDisplayInfo(id) - Returns the name of the channel according to the given id.
        GetNumVoiceSessions - Returns the number of voice sessions the client is currently in. Ignores those under the 'World' category.
        GetSelectedDisplayChannel()
        GetSelectedMute()
        GetMuteName(id) - Returns the name of a muted player.
        GetMuteStatus("unit", "channel") - Returns whether a particular unit is currently muted in a particular channel.
        GetNumMutes() - Returns the number of people you currently have muted.
        GetVoiceCurrentSessionID()
        GetVoiceSessionInfo(id) - Returns the name of the voice session according to the given id. Does not apply for channels under the 'World' category.
        GetVoiceStatus("unit")
        IsMuted("name")
        IsSilenced()
        IsVoiceChatAllowed - Returns 1 if Voice Chat is enabled on the server, nil otherwise
        IsVoiceChatEnabled - Returns 1 if Voice Chat is enabled for your client, nil otherwise
        SetActiveVoiceChannelBySessionID - Set the active voice session to the session of the given id.
        SetActiveVoiceChannel()
        SetSelectedDisplayChannel()
        SetSelectedMute()
        UnitIsSilenced()
        UnitIsTalking()
        UnSilenceMember()
        VoiceChat_ActivatePrimaryCaptureCallback()
        VoiceChat_GetCurrentMicrophoneSignalLevel()
        VoiceChat_IsPlayingLoopbackSound()
        VoiceChat_IsRecordingLoopbackSound()
        VoiceChat_PlayLoopbackSound()
        VoiceChat_RecordLoopbackSound()
        VoiceChat_StartCapture()
        VoiceChat_StopCapture()
        VoiceChat_StopPlayingLoopbackSound()
        VoiceChat_StopRecordingLoopbackSound()
        VoiceEnumerateCaptureDevices()
        VoiceEnumerateOutputDevices()
        VoiceGetCurrentCaptureDevice()
        VoiceGetCurrentOutputDevice()
        VoiceIsDisabledByClient()
        VoicePushToTalkStart()
        VoicePushToTalkStop()
        VoiceSelectCaptureDevice()
        VoiceSelectOutputDevice()


World Battlefield


The following functions are used for population-limited world PvP zones, primarily Lake Wintergrasp.


        BattlefieldMgrEntryInviteResponse(queueId, accept)
        BattlefieldMgrExitRequest(queueId)
        BattlefieldMgrQueueInviteResponse(queueId, accept)
        BattlefieldMgrQueueRequest
        CanHearthAndResurrectFromArea() - Returns whether you can currently be resurrected and teleported out of the world PvP zone.
        HearthAndResurrectFromArea() - Resurrects the player and ports them out of world PvP zone.
        CanQueueForWintergrasp() - Returns whether you can queue for Lake Wintergrasp at the moment.
        GetWintergraspWaitTime() - Returns number of seconds before the next Lake Wintergrasp battle, nil if a battle is currently in progress.
        GetWorldPVPQueueStatus(queueId)


Who


        GetNumWhoResults() - Return the number of entries resulting from your most recent /who query.
        GetWhoInfo(index)
        SendWho("filter") - Send a who request to the server.
        SetWhoToUI(toUIFlag) - 'who' request results should be sent as WHO_LIST_UPDATE instead of to chat.
        SortWho(sortType) - Sorts an existing /who list; displays the Who List frame if not visible.


And here is some weakauras specific information: 


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Custom Options
Allen Faure edited this page Jun 3, 2019 · 21 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
Introduction
WeakAuras version 2.10 and later supports custom option panels. This allows authors of complex auras with lots of code to let users modify the behavior of those auras, without having to worry about the user editing code. Please note that WeakAuras only provides a space for you to build this panel of options, and does not assist you in designing your GUI to look presentable, or be easy to understand for your users. For assistance in designing a decent UI, see Tips & Tricks, or visit our discord server for advice from a human.
Table of Contents
* Author Mode
* Common Option Fields
* Option Types
* Option Groups
* User Mode
* aura_env.config
* Tips & Tricks
________________


Author Mode
To begin making your own options, open WeakAuras Options to the aura you wish to add custom options, click on the Custom Options tab, and then click on Enter Author Mode to enter Author Mode. In Author Mode, you will be presented with a list of options which you can edit to suit your needs. At first, you will only have the ability to Enter User Mode, or Add Option. Enter User Mode toggles back into User Mode, while Add Option ... adds an option. The first option you add will look something like this in Author Mode:
 babbys_first_option 

Option Controls
Each of these controls will change how the option is rendered and behaves while in User Mode. Since a comprehensive User Mode option panel generally takes a lot of options to create, there are some basic Quality of Life style controls in the header, which you can see at the top of the above image:
* The chevron on the left of the Title is a toggle button, which will collapse the option entry for ease of navigation. While collapsed, only the option header is visible.
* The up and down arrows will move the option up and down, respectively. The order of the options in Author Mode determines the order in which they are shown in User Mode, so you can use this to fine tune the design of your options panel.
* The icon which looks like 2 stylized pages with an arrow will duplicate the option, and insert the duplicate directly below.
* Finally, the red X will delete the option. Note that currently, this cannot be undone, so take care to not accidentally click that button!
________________


Common Option Fields
Below the option header are several inputs which control the behavior and appearance of the option in User Mode. Some of these are common to all option types:
* Display Name - The title that the user will see for this option in User Mode.
* Option Key - The key by which you can access the user's choice for this option in custom code. See aura_env.config for details. This is always interpreted as a string valued key.
   * NOTE: It is illegal to have multiple options on the same aura with duplicate keys. Attempting to do so will cause the new key you are writing to be rejected. This is done for the sake of your sanity. ;)
* Option Type - The type of widget which the user will see. This also determines any additional controls which appear in Author Mode. See Option Types for details on what each option type supports and expects.
* Width - The width of the option.
   * A width of 1 represents half of the width of the panel, and a width of 2 represents the whole width. Think of it as 2 columns, side by side.
   * If the remaining width in one row is insufficient for an option, then it will be rendered on the next row.
* Default - The default value. In User Mode, once the user has begun to modify the controls, a button labeled Reset To Default will appear. Clicking it will reset all of the values to the default that you choose here.
* Tooltip - These two options (the toggle and the text input) determine what tooltip will be shown when the user mouses over the option in User Mode. Toggling the tooltip checkbox off will disable the tooltip; while toggled on, you can edit the text which will be shown. This is best used for explaining what an option does when the Display Name is insufficient to explain on its own.
________________


Option Types
Each option type adds its own controls to Author Mode, representing the special values which it requires in order to function properly. They are listed here:
Description
 description_preview 

This option type will place a non-interactive chunk of text of your choice into User Mode. Since it is non-interactive, the Option Key, Option Name, Default, and Tooltip controls are irrelevant and not shown.
Description Fields
* Description Text - The text to be shown. This can support multiple lines of text, so you are given a large editbox to write your text into.
* Font Size - The font size to be used. Currently, only Small, Medium, and Large are supported.
Space
 space_preview 

This option type will create a space in the UI. This renders in User Mode to a description element with no text, but is helpful to provide here as an easy shortcut to create space quickly.
Space Fields
* Width - If the toggle box is unchecked, then the space will fill the remainder of the line that it falls on. Otherwise, it will have a width as set by the slider.
* Height - If the toggle box is unchecked, then the space will occupy only the line that it falls on. Otherwise, it will span across the number of lines set in the slider.
Separator
 separator_preview 

This option type creates a horizontal line to separate sections, with optional text to accompany it.
Separator Fields
* Separator Text - If the toggle box is checked, then the text provided in the input field will be inserted into the center of the separator. Otherwise, a continuous line will be rendered.
Toggle
 toggle_preview 

A simple checkbox. There are no additional fields for this option. Values can be the boolean values of true (checked) or false (unchecked).
Toggle List
 multiselect_preview 

A collection of checkboxes. There are no additional fields for this option. This is useful for if you have a lot of toggle options which are similar to each other in purpose. NOTE: The user's choices for each checkbox will be found at aura_env.config[optionKey][index], where index is a positive integer. So in the screenshot above, the user choice for val1 would be found at aura_env.config[optionKey][1], since it is the first checkbox in this toggle list.
Color
 color_preview 

A simple color picker the user can click on to open the Color Picker Widget. There are no additional fields for this option. The value in custom code will a table of the form {r, g, b, a}, which represents normalized RGBA. So, a value of {1, 0.5, 0, 1} represents orange, and {1, 1, 1, 1} is white.
Note: the remainder of the option types described will omit the common option fields in their preview images, as they do not change for any other option type.
String
 string_preview 

A simple string input.
String Fields
* Max Length - If the checkbox is checked, then the string the user inputs will be trimmed if it is too long. The slider goes up to 20, but you can enter a larger number if you wish by typing into the small input field below the slider.
Number
 number_preview 

A simple number input. In User Mode, this is identical in appearance to the string option type, but it will only accept inputs which can be evaluated into a number.
Number Fields
Note that all of these values can be unset if you do not wish to restrict the user's choice in User Mode.
* Min - The minimum acceptable input. Inputs below this minimum are adjusted to the minimum. Defaults to 0.
* Max - The maximum acceptable input. Works the same as Min, but on values larger than what is deemed acceptable. Defaults to 1.
* Step Size - The minimum acceptable step size. If set, then the user input will be adjusted down, until is is equal to min + n * stepSize, for some non-negative integer n (if min is not set, then it is interpreted as 0 for the purposes of stepification). Defaults to 0.05.
Slider
 slider_preview 

A simple slider. This is an alternative method to get a number value in your configuration.
Slider Fields
Note that all of the following fields are optional, just like in the Number Option Type.
* Min - Identical to Min in the Number Option Type. Defaults to 0.
* Max - Identical to Max in the Number Option Type. Defaults to 1.
* Step Size - Identical to Step Size in the Number Option type. Defaults to 0.05.
* Soft Min - Similar to Min, but affects only the slider. Has no default value. This value must be greater than or equal to Min to have any effect.
* Soft Max - Similar to Max, but affects only the slider. Has no default value. This value must be less than or equal to Max to have any effect.
* Slider Step Size - Similar to Step Size, but affects only the slider. Has no default value. This value must be greater than or equal to Step Size to have any effect.
Dropdown Menu
 dropdown_prieview 

A Dropdown Menu. This option type is more complex than the other basic option types, so it will take up more space.
* Default - The default value control here is a dropdown menu, whose options are determined by the values you enter into the controls below. Note: in custom code, the value you get will be an integer (starting at 1) which represents the user choice. So, if you have {'val1', 'val2', 'val3'} as choices in a dropdown menu option, and the user picks 'val2', then you will see 2 as the value chosen in custom code.
* Value controls - Each existing value in the dropdown menu will be on its own row. You can edit the string which the user will see, or delete the entry by clicking the red X, or by entering an empty string into the input field.
* New Value - Enter a value here to add a new option to the dropdown menu. The controls in Author Mode will extend to accomodate it.
Option Groups
WeakAuras 2.13 and later supports the formation of Option Groups, which are designed to allow authors to create complex option UIs, with better organization. An option group is, at its core, an option with other options nested inside. The value of the option group in aura_env.config is always a table, and the group type determines how the table is arranged.
 option_group_preview 

NOTE: WeakAuras supports arbitrary nesting of option groups, and it is ultimately up to you how far you wish to nest things. However, deep nesting of groups does not always make sense from a UI/UX perspective, so some degree of caution is recommended, so that you do not accidentally make a horrifically complicated UI.
Option Group Fields
* Display Name
   * The title of the option group. This is displayed in the collapseible header.
* Group Key
   * The location within the config table where this option group exists. The behavior of this field is identical to that of non-group options, and duplicate keys are still forbidden.
* Collapsible Group
   * if this option is checked, then the group will be rendered in User Mode with a text button which toggles visibility of its children when pressed, similar to Author Mode.
* Start Collapsed
   * Determines if the group is collapsed in its default state. Has no effect if the group is not collapsible.
* Group Type
   * Currently, Simple and Array are supported as option group types:
      * Simple groups have their sub options' values located directly in the group's table. So, if you have an simple group with a key foo, and that group has a option toggle with a key bar, then you can find the value of bar at aura_env.config.foo.bar.
      * Array groups have copies of their sub options' values in an array of 0 or more subtables of the group's table. This allows the user to make multiple similar entries with similar data (quite handy for e.g. setting up an interrupt rotation). If you have an array with key foo, and a sub option in that array with key bar, then you may find the values of bar at aura_env.config.foo[index].bar, where index is an integer which represents the...index of the entry you are searching. Entries into an array always constitute a contiguous range from 1 to #aura_env.config[key], where key is the key of an array group.
* Number of Entries
   * Dropdown menu, with 3 options. Controls how the entries in an array are limited. Has no effect on simple groups:
      * Unlimited - array has no limit on # of entries, and the user may create and delete entries at willl.
      * Limited - array may not have more than the # of entries specified in the Entry Limit slider. The user will be blocked from adding entries which exceed this limit.
      * Fixed Size - like Limited, but array may not have fewer than the # of specified entries, either. The user will be blocked from creating or deleting entries for this array.
* Entry Limit
   * Slider, which specifies the size of the array. Has no effect if the array is unlimited.
User Mode
In User Mode, you get to see all the fruits of your labor. Here is an example for you to play with:
!vE1AVTTnu0FlRddOfOjq(TZ(wAQZAlCvYcDB(MQPLOK5MePkfPtsXG)TVZLus2oTaRlPnMpV3Z9CFrNmizvcRkHLr)dd1oBPujsy38PvlFF8IewUwzzYVjsIhmmH1ikZVvlv2e2BUz1QB(yc7XBYZBe2KRpB(0jtgnz0O5thn9IOrJsYpB8eiyztDj)PvIhXT(T0ewQRXQRcZZDQuRuRE5R2)H9Rd)AewNrTF9lFXsTruTFTSUXHpY0LAZ(1ns7(18kH917xNQvnIulDbSwMSw2Kkvf7xlkL2Z3V(kdVbtC7xxjBLdw9ZYD8kh2a4kvy4qE5ctLqz9QrYRGO)QtItuPlfnwPy)6YawsDMg6Qos8VxzfMm6sciJkooRJNXH4a(WH4P4)4m9MqTrwrIvQOZ4sLBCneGiDSXv6pI2yHe2rwqhkSIYssPaUsLKd0PePpZ61zsnihhiGAVTFPqj4ksNcR0DGgD2aBSvOYmcJK4rATDUYANLtOTIxO4ejkK54uqy)jWXxDyRgDgzMyaVwkG4Bez9UgRuLkZCkBp)DeV2zevCRvsw9TgUObBcRbrbW6eACpRrcYWRlrbrRbIGgJDZnW9kll5ExtjPcUj1bPf78R65KV6iFQvuv7DvgYy2jTCitJZA8bbFki0glfHy2QvP0z5LKQj6lMxDGbic3dPD6sNTM3dRCHRqstLTHc4MmIrcMFqBbd88x8QFVXT5LdE9WieTts9dF)VjSN6sOgpDWSlMI0PlIgpEgsLc5tCv6wTPnl8QfXRwChYP0QCzbLcB1ffWbHHXdsEtcoJUMYWMNeh1nEaTx7yiXX4NUPtdxmo68HjXdtUEYWHZMfnBE0WztgmDmLupzCs8i)Hgt)TxddH6Ahod3nI25qU(NQZqSvcZ1(j3Hn4wz69Ym72e2Lyow1xnGqpdEgJfdOQeiQVzBymggwfJrSsrHW0ASR6xGgMj24YZx9un017wS82R)0sSVFk3z4uXSAer((SMGCHRrSdrJmCl5JjSVC1LSvFHT6Y7GWCKszuzmi8(JERr4pk72flHW9RbLj4LKbPOAaDif5e9qZVazO7eRcl(rDgkWE2apLbIb(3BQ7iIwlZJCu)fj8KXHQhLwVBK0tc7TgDDM(bKq(rHYLW2XlDDrb0KbK3KgmK0XFlE6qSa7bVhW7kXH6vwMOj1i9hQtlbuTF9Vo6ezGzwF58vB9v3Oejuu4W99zsuHaKctzlnOwzjYE0u2FdAVq1jrwZwEz((1E8C(r9Ey(Z3d0OZNqqD0phuhFcuh3b1lj9z)VWlbg7w)2LCtH4ym)6wqNPDBkf)iy7VspSjMhPmu4uJiMa5B6W)wbpJIScq7FsVg)mFEu07egrp(Ae1C0SsB(Ltf5Kd8qi5VJcw5NTF9nTeZr0WWdXqV50aGPhKwf2w2fYDsavP224dO05KFOBtyDi)KqetJxrazXAq9AGO4z(AuwJUKI)ofFlrf)d4PTWfK(gs2BiPUHK5gsGBirTPpgURA3jMWSdMGuHEAEc)TW7EIT2RW26FhXotcruu8SVB4JuZjvbfiqXghIAgd3DyhVThmlQkKQWR0LH9OYWXZpGQuQDz3XVk078h4KM(ms5)xr5JzKl8fu152p26Ec4WWvu85rSdSviHiQ6RO2ZsDIb5CSk629LCyLse0sVcYZXEXtxFu0b6JijDBk1dAxjsx2akTqRZOujdL1HgNqW(NTvy0U6q215NqfZoQMNVZsmkw2ZNkx1gk955gYGo7i68Ojh769gsuNHCBjNEqwSxkh8ebBiw7F)gkl9KgVJuq959PJkT6mv7v2I8u6Tlu4IpKleEilu4vJzNAkZpYuIcnd8pEqXl)m6LrQoEaW4FHwNYCCTLlUgw6dAt29gEDc7((rs8U9)apZZiXZNUsxvxkqO6v(EU4bGOnNpRlt21lH6LAGnJquUL7PIWZjUMwn0SKD1DlwetBiP(Zaoh1mMLbHsl(LUgsK8B6DeuAVLyFP6N)09T3)5opLptw(frtkF1DOzBJlu0nHDTr(n6XQ8mY(2VE1QUKTqcKVli93ttvqxCr29TLuJIO6BC)3hcpri1)vKOkHDTUtl5nnF3Qum7ZxelBefWEcmRV6oDu0UwSdvnH6hpKqqY)o


It will look like this:
 playground 

________________


aura_env.config
In order to read the values which your user chose, you must index aura_env.config in custom code. This is a table which WeakAuras provides to you. For each option you built in Author Mode (except Description and Space elements), there will be a corresponding value at aura_env.config[optionKey], where optionKey is the value that you wrote in the Option Key input field. So, if you had a toggle option which looked like this:
 optionKey_preview 

Then you could check if the user wanted to "Show All Debuffs" by checking the value of aura_env.config["showAllDebuffs"].
WeakAuras guarantees that any change in aura_env.config will be visible to the custom init action. Custom code that runs after init (so, all of it) is not granted the same guarantee for performance reasons, though in practice you will never encounter a scenario where aura_env.config is not the same in a later script, unless you write something to the table or replace it.
________________


Tips and Tricks
Here guidelines for creating intuitive and easy to read custom option panels:
* Name your options well. If you have a toggle option named Show All Debuffs, then users will expect that this will somehow translate to the aura showing all debuffs. Try not to be vague, and pay special attention to any time that you change the behavior of an option in your code. Make sure that the Display Name, tooltips, and any description texts are updated to reflect this change in behavior!
* Make some room. Don't be afraid to add description texts which don't have any text in them, to make spacers. This can turn a crowded UI into a comfortable UI. Don't just do this blindly, however. Ask friends for feedback on if your design seems crowded.
* Keep it simple. This might seem counterintuitive, given how complex much of WeakAurasOptions can be, and how this feature gets such prime real estate (as it's in its own special tab), but it's really true. The fewer options you can get away with, while still providing the full functionality you need, the better.
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Custom Options · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Custom Triggers
Buds edited this page Apr 29, 2023 · 39 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
Custom triggers are an advanced feature that is only intended for users who know Lua. As such, the following page will assume you are familiar with Lua and related programming concepts.
(For more information on Lua, see Programming in Lua.)
________________


Custom triggers are a way for you to trigger a WeakAuras display using any arbitrary Lua code. There are two types of custom triggers: Status and Event.
Status
"Status" type Custom Triggers are based on the assumption that they will be used to check a value that can always be determined. They can be set to update on certain events, or simply every frame. The main way they differ from "Event" type Custom Triggers is that they receive a dummy (no args) version of any listed events when doing things like logging in, reloading, or exiting WA config. These dummy events let you check the current status of whatever you're showing.
A simple example of a Status Trigger would be, if you're trying to monitor the health of a unit then you register UNIT_HEALTH, but when you close WeakAuras config you don't want to have to wait for the unit's health to change before you can show your Aura. The dummy events of a Status trigger let you establish the initial state.
Event
"Event" type Custom Triggers are based on the assumption that they will be used with events that pass relevant information. As such, the main way in which they differ from Status type custom triggers is that they will not be forced to update at time when Status type custom triggers would. Event type custom triggers can be set to hide on a timer, or they can have a custom untrigger.
To use events that you specify in the Event(s) field you need to set up your functions in a specific way. Say for example you wanted to check on events ENCOUNTER_START and ENCOUNTER_END and you want to use these events in your trigger function:
--Event(s): ENCOUNTER_START, ENCOUNTER_END
--Trigger
function(event, arg1, arg2, ...)
    if event == "ENCOUNTER_START" then
        --Use the arguments for this event
        return true
    end
end


--Untrigger
function(event, arg1, arg2, ...)
    if event == "ENCOUNTER_END" then
        --Use the arguments for this event, or dont, just untrigger.
        return true
    end
end
The actual event name is always passed into the function as the first arg (except in Trigger State Update triggers, see below), followed by all of the event's arguments. For more details on available events see Wowpedia.
A side note about arguments in Lua: If you are using more than one event you can use an ellipsis, known as a "vararg" (...), to store arguments from an event, letting you check the event name before assigning pertinent variable names to the arguments for that specific event. select(number, ...) can be used to pick args out of the vararg as needed. You can learn more about varargs in Lua via their documentation.
Trigger State Updater
Trigger State Updater directly modify the structures that contain information about the trigger state. The main benefit to the other two trigger methods is, that it allows for creating multiple displays from your custom trigger function. See the TSU Wiki page for more info on how to use this trigger type.
________________


Trigger Options
Check On...
Only available for Status type custom triggers. When set to Every Frame, the trigger will not require any events, but will instead be checked using an OnUpdate script.
Event(s)
A list of events which will cause the custom trigger function to be called (as well as the untrigger function, if the trigger function returns false). Multiple events can be listed, separated by whitespace and/or commas.
As of WeakAuras 2.12.4, you can do some limited filtering on specific events.
* On all UNIT events you can filter by the unitID the event carries. e.g.:
   * UNIT_SPELLCAST_SUCCEEDED:player
   * UNIT_TARGET:boss1:boss2
You can also use meta-units arena, boss, nameplate or group
* For COMBAT_LOG_EVENT_UNFILTERED you can also filter subevents. e.g.:
   * COMBAT_LOG_EVENT_UNFILTERED:SPELL_CAST_START
   * CLEU:SPELL_CAST_START:SPELL_AURA_APPLIED (Note you can use the abbreviated event name "CLEU" too)
The events that do fire into the trigger will still carry all the args you would normally expect to see. All this does is fire the trigger for less unwanted events.
Watched Triggers
The keyword TRIGGER can be used along with trigger numbers for as many other triggers in the Aura as you want to track. e.g.:
* TRIGGER:5
* TRIGGER:1:2
This will have your Custom Trigger fire any time the specified triggers update, with the parameters (event, updatedTriggerNumber, updatedTriggerStates). The updatedTriggerStates parameter is a table containing all states that the trigger in question carries, keyed by cloneID. Note: a trigger which does not clone will have the cloneID of "" (an empty string). Those used to TSU (Advanced Custom Trigger) will recognise the way this table is set up.
You can watch other Custom Triggers but WA will block "reciprocal" triggers (trigger1 requests trigger2, and trigger2 requests trigger1).
Example: https://wago.io/WatchedTriggerExample
 Imagine you want to track nameplate units and range check on them. This Aura gets WA to handle the unit tracking then uses the units gathered to create states in a TSU and range check them.
Note: this isn't necessarily the best way to achieve a goal like this but provides a simple example of how Watched Triggers can be useful. You get a built in WA trigger to collect information then use it as you need in a custom trigger.
The easiest way to examine what information is contained in a state is to use ViragDevTool. Add ViragDevTool:AddData(updatedTriggerStates, "your name") to your watching trigger.
Custom Trigger
The custom trigger field should be an anonymous function which returns true if the trigger should become active. The function will be passed all the arguments that are specified for the event that triggered, starting with the name of the event. If the function returns false, nil, or nothing, the trigger will not automatically become inactive - instead, failure of the trigger function will cause the untrigger function to be called. For trigger state updater triggers, please refer to the section at the bottom.
Custom Untrigger
The custom untrigger field, just like the custom trigger field, should be an anonymous function, and will be passed the same arguments as the trigger function. However, it should return true if the trigger should become inactive - i.e., the trigger's display should be hidden. If the untrigger function returns false, nil, or nothing, no change will be made to the display. It will remain visible if it is already visible, or it will remain invisible if it is already invisible. Most of the time, for status type custom triggers, the untrigger function can always return true. However, it can be useful to define a trigger and untrigger in such a way that there is a grey area. See Triggers and Untriggers for more info.
Hide
Only available for Event type custom triggers. If set to Timed, the Custom Untrigger field will be hidden, and the custom trigger will simply last for a pre-defined amount of time. If set to Custom, a custom untrigger function can be defined.
Dynamic Information
The status and event custom triggers can return dynamic information by implementing the duration, name, icon, stacks, and texture functions. The return values of the name, icon,texture and stacks function is simply the value of that dynamic information. The duration function for timed progress should be two values: duration, expirationTime and for static progress, three values: value, total, true.
FRAME_UPDATE event
A fake event "FRAME_UPDATE" is triggered every frame. It can be used to handle normal events and an OnUpdate script in a same function.
STATUS event
On loading and after the Options window is closed, all loaded "status" auras receive a fake "STATUS" event. Custom auras can react to this event and setup their states.
Note, that auras that have the compatibility option enabled instead get fake events for all events listed in the event list.
OPTIONS event
Each aura that is displayed in the Options receives a fake "OPTIONS" event. Custom auras can react to this event and setup states that are useful while the options are open. These states are automatically cleared on closing the options.
If a trigger does not provide any states in response to the OPTIONS event, fake states are automatically created.
Note, that errors from triggers while reacting to the OPTIONS event are silently ignored for auras that have the compatibility option enabled.
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Custom Triggers · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
aura_env
​Florian H edited this page Jan 28, 2023 · 12 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
aura_env
aura_env is a built-in local table at the top of each aura declaration. Variables declared in this table will have their scope limited to the containing aura. aura_env can be accessed as global variables by functions within the current aura while remaining invisible to other auras.
To use aura_env for your own variables, simply assign it as a prefix to your variable name. An example of its use would be:
--Custom Trigger Function
function()
    -- Select the icon for either Moonkin form or Bear form.   
    aura_env.icon = select(2, WA_GetUnitBuff("player", "Moonkin Form")) or select(2, WA_GetUnitBuff("player", "Bear form"))
    return aura_env.icon -- If an icon is present, this will return true.
end


-- Custom Icon Function
function()
    -- Return the Icon we found. (Moonkin, Bear, or None)
    return aura_env.icon
end
Within aura_env
aura_env currently has 5 values id, cloneId, region, state and states.
* id simply outputs the name of the current aura.
* cloneId is used with "Trigger State Updater" where it will return unique ID for each state.
* region is the region of the aura. See here for more.
* state is a table that stores information about the current state. The current state is the one that the aura is pulling dynamic information from. See below for more information.
* states is a table that stores the state information of every trigger, similar to state. It is not accessible from trigger functions.
   * aura_env.states[2] would access the state of the second trigger.
* saved is a storage auras can use to store data across sessions
Within aura_env.state and aura_env.states
The values contained within the state depend on the type of trigger being used. Some potentially useful ones are:
* aura_env.state.show - a simple and quite useful boolean for whether the trigger is active or not
* aura_env.state.stacks
* aura_env.state.duration
* aura_env.state.expirationTime
* aura_env.state.icon
* aura_env.state.spellId
All text replacements are valid state values, except the one-letter replacements. These can be found in the tooltip when mousing over the Display Text box in the Display tab, as seen here. %percenthealth would equate to aura_env.state.percenthealth, for example.
Be especially careful to catch nil values from these variables before using them in things like custom animation functions.
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
aura_env · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Useful variables and functions within WeakAuras
asaka-wa edited this page Sep 7, 2020 · 18 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
This page is for built-in features in WeakAuras that were either added specifically to help custom coders or are part of WeakAuras code base normally for the add-on itself. Since these built-in variables and functions to the add-on itself they are subject to change at the developer's discretion.
Helper Functions
With WoW API 8.0's change to the way auras (buffs / debuffs) can be queried, WeakAuras added some Helper Function that were specifically made to be used by Custom Aura makers to make this a bit easier. Since they were being added a couple of other useful functions were added at the same time.
Buff/debuff querying
WA_GetUnitAura(unit, spell, filter)
 WA_GetUnitBuff(unit, spell, filter)
 WA_GetUnitDebuff(unit, spell, filter)
Args
* unit - string - a valid unitID
* spell - string or number - Spell Name or Spell ID
* filter - string - Ultimately the helper functions call the Blizzard base functions so the same filter strings can be used.
Returns
See this Wowpedia link for the vars returned by these functions.
Used to query specific buffs or debuffs on specific units. After 8.0 Blizzard removed querying by spell name from the base functions and provided their own helper function. However that function is awkward to use and fairly slow. The aim with these functions was to maintain the syntax people were used to.
Group Iteration
WA_IterateGroupMembers(reversed, forceParty)
Args
* reversed - boolean - iterate backwards through the group.
* forceParty - boolean - only iterate the player's party, and not the whole raid.
Iterates through the player's group (party or raid), returning a unit for each member. A simple example that would print the names of your raid members:
for unit in WA_IterateGroupMembers() do
    print( UnitName(unit) )
end
Class Colouring
WA_ClassColorName(unit)
Args
* unit - string - a valid unitID
Returns
The function returns the name of the unit with "Escape Sequence" formatting to colour the text appropriately for their class.
String shortening
WA_Utf8Sub(string, numCharacters)
Args
* string: the string to be shortened
* numCharacters - number: The number of characters the string should be reduced to
Returns
The function shortens strings, with the advantage over a simple string.sub call of not tripping up on "non-standard" characters (ones that take more than one byte). This is especially useful for names in WoW as shortening a name like Légóólás would cause issues.
________________


The rest of this article covers elements of WeakAuras that were not specifically created for users. Therefore, while they can be very useful and certainly won't be altered without due consideration, their usefulness to custom Aura creators won't necessarily be factored in to any changes made to them.
Variables
WeakAuras.GetActiveConditions(aura_env.id,aura_env.cloneId)
Very similar to the "triggers" table mentioned above, but this function returns a table containing booleans for each Condition your Aura contains.
For example,
local conditions = WeakAuras.GetActiveConditions(aura_env.id,aura_env.cloneId)
if conditions[2] and not conditions[3] then
This would run the following code if the second Condition on the Aura were active while the third was not.
WeakAuras.CurrentEncounter
WeakAuras.CurrentEncounter is a table that holds some encounter information for a fight. You can access the information via the following internal variables:
* id = encounter_id
* zone_id = ZoneMapID
* boss_guids = {}
________________


Functions
WeakAuras.ScanEvents()
WeakAuras.ScanEvents is a built-in function that is used by Weak Auras to pass in actual game events to the Add-on. Players can use this function to create custom events for their own needs which can be used to send events to either trigger or pass information to the aura itself or another aura.
The format for WeakAuras.ScanEvents is as follows:
WeakAuras.ScanEvents("CUSTOM_EVENT_NAME", argument1, argument2, ...)
Once this function is executed it will trigger an event you can capture using the event name you specified the same way you would use any normal WoW event. See Event for more information on how to use them.
Example
https://wago.io/4ypVLlCqb uses ScanEvents to pass information between two auras. Also uses aura_env.
WeakAuras.IsOptionsOpen()
WeakAuras.IsOptionsOpen() is a useful function to check if the options menu in WeakAuras (accessed by /wa) is open. You can use this function as a 'default' for any text or auras you have that may not have any data loaded while the options are open. This functions returns a basic boolean value.
if WeakAuras.IsOptionsOpen() then
    --Do default code when open
else
    --Do normal code when the options is not open.
end
WeakAuras.GetNumSetItemsEquipped(setID)
If given a valid setID then it will return the number of items from that set that are currently equipped.
WeakAuras.GetAuraTooltipInfo()
WeakAuras.GetAuraTooltipInfo() is a function within WeakAuras that parses an aura's (buff/debuff) tooltip to fetch information that can otherwise be difficult to acquire.
tooltipText, debuffType, tooltipSize = WeakAuras.GetAuraTooltipInfo(unit, index, filter)
Arguments
* unit - A valid UnitID (e.g. "target", "focus", "raid5")
* index - The index of the specific aura
* filter - CANCELABLE, HARMFUL, HELPFUL, NOT_CANCELABLE, PLAYER, RAID. Multiple filters can be used separated with a "|"
Returns
* tooltipText - All the text in the main area of the tooltip.
* debuffType - Curse, Disease, Magic, Poison if applicable.
* tooltipSize - In most cases this will be the most useful value. The function strips out other text and returns the main number value on the tooltip.
Custom Glows
Custom glow functions are contained within a library.
To access the library use:
local LCG = LibStub("LibCustomGlow-1.0")
Pixel Glow
LCG.PixelGlow_Start(frame[, color[, numberOfLines[, speed[, length[, thickness[, xOffset[, yOffset[, border[ ,key]]]]]]]])


Arguments
* frame - UI element - Target frame to set glowing.
* color - table - {red,green,blue,alpha}, Color and opacity of lines, from 0 to 1. Default value is {0.95, 0.95, 0.32, 1}.
* numberOfLines - number - Number of lines. Default value is 8.
* speed - number - Speed of the animation, set to negative to invert direction of rotation. Default value is 0.25.
* length - number - The length of the lines, in pixels. If not set then the default value will automatically adjust depending on region size and number of lines.
* thickness - number Thickness of lines in pixels. Default value is 2.
* xOffset - number - Horizontal offset of glow relative to region border, in pixels.
* yOffset - number - Vertical offset of glow relative to region border, in pixels.
* border - boolean - set to true to create border under lines. Defaults to true.
* key - An arbitrary "key" for this specific glow. This allows for multiple glows on one frame, so you can specify stopping the glow, using this key.
To stop the glow use LCG.PixelGlow_Stop(frame[, key]) (key optional)
Autocast Shine
LCG.AutoCastGlow_Start(frame[, color[, numberOfParticleGroups[, speed[, scale[, xOffset[, yOffset[, key]]]]]]])


Arguments
* frame - UI element - Target frame to set glowing.
* color - table - {red,green,blue,alpha}, Color and opacity of lines, from 0 to 1. Default value is {0.95, 0.95, 0.32, 1}.
* numberOfParticleGroups - number - Number of groups of particles, each of which contain 4 particles. Default value is 4.
* speed - number - Speed of the animation, set to negative to inverse direction of rotation. Default value is 0.125.
* scale - number - The scale of particles. Defaults to 1
* xOffset - number - Horizontal offset of glow relative to region border, in pixels.
* yOffset - number - Vertical offset of glow relative to region border, in pixels.
* key - An arbitrary "key" for this specific glow. This allows for multiple glows on one frame, so you can specify stopping the glow, using this key.
To stop the glow use LCG.AutoCastGlow_Stop(frame[, key]) (key optional)
Action Button Glow
This glow looks like the default glow
LCG.ButtonGlow_Start(frame[, color[, speed]]])


Arguments
* frame - UI element - Target frame to set glowing.
* color - table - {red,green,blue,alpha}, Color and opacity of lines, from 0 to 1. Default value is {0.95, 0.95, 0.32, 1}.
* speed - number - Speed of the animation, set to negative to inverse direction of rotation. Default value is 0.125.
To stop glow the use LCG.ButtonGlow_Stop(frame)
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Useful variables and functions within WeakAuras · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Custom Dynamic Group
Allen Faure edited this page Jan 19, 2023 · 14 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
Dynamic Group Custom Functions
WeakAuras 2.12 introduces the ability to write custom functions for a dynamic group's Grow and Sort options, which will allow you to define what your group should look like very precisely.
WeakAuras 2.14 extended it to group and anchor regions by frames.
aura_env
In a dynamic group, aura_env has a slightly different meaning. There is no state information, so aura_env.state is always nil. Additionally, there is no such thing as a cloned group, so aura_env.cloneId is always nil. There is a new value which is provided to you, which can be accessed at aura_env.child_envs. This is a table which contains all of the aura_env tables of the group's children, in dataIndex order.
RegionData
Both custom sort and custom grow will give you some special tables, which are called regionData (for the simple reason that they contain the region and the data). RegionData is structured as follows:
regionData = {
    id = "string", -- name of the child,
    cloneId = value, -- the cloneId. Usually string, but can be any value, including nil. If this child does not clone, then this value will be nil or empty string "".
    dataIndex = 1, -- number which indicates the order the child appears in the options Pane, starting at 1.
    data = {...}, -- table containing data with which to construct the child's aura
    region = {...}, -- the region object which was built from the data for this child.
    xOffset = 0, -- x offset from previous layout function execution. This may be nil on the first layout.
    yOffset = 0, -- y offset from previous layout function execution. This may be nil on the first layout.
    show = true, -- Boolean indicating if the region was allowed to be shown (note that this is not the same as a region being active)
}
Note: regionData objects are intended to be read only, but for performance reasons this is not enforced. Writing to the regionData object will result in undefined behavior.
Custom Sort
Custom Sort is the more straightforward of the two new functions. You are given two regionData objects, and are expected to return true if the second must be sorted before the first:
function(a, b)
    -- this is roughly equivalent to the "None" sort option
    return a.dataIndex <= b.dataIndex
end
Compositional sorting
The underlying code for the builtin sort options uses a compositional system, which can be repurposed for custom code if you wish. In most cases this will lead to code that is much easier to write and maintain, particularly when the values which you are sorting on don’t necessarily exist.
The code of compositional sorting relies on a few concepts:
* comparator
   * A function which accepts two parameters, and returns true, false, or nil. A result of true indicates that the arguments must be swapped, a result of false indicates that the arguments must not be swapped. A result of nil indicates an indeterminate result, either because the value are equal, or the values cannot be compared using this comparator. Note that the custom sort function itself is a kind of comparator, and WeakAuras will interpret a nil result in this case as being equivalent to false.
   * A comparator can compare any two values, not just regionData objects. This is useful to simplify comparing values deep in the regionData objects, see the documentation on SortRegionData for more information.
* path
   * A list-like table consisting of strings, used as a locator for values in a regionData object. For example, to access regionData.region.state.index, the appropriate path is {"region", "state", "index"}
... and is supported by a few API functions:
* WeakAuras.ComposeSorts(...)
   * takes as arguments a variadic list of comparator functions, and returns a new comparator which composes them in the order they were passed in.
   * This new comparator operates the following loop, which produces the effect that earlier comparators have higher "priority":
      1. Get first comparator from variadic list
      2. Run sub-comparator, and check result.
      3. If nil, repeat step 2 with next comparator from variadic list.
      4. If not nil, return result.
* WeakAuras.SortRegionData(path, valueComparator)
   * takes as first argument a path to retrieve values with from the region data, and as second argument a comparator to sort said values with, and returns a comparator suitable for use as a custom sort function. This helper helps you abstracts away the tedium of accessing necessary information from the regionData, which is a common pain point with traditional sort functions.
* WeakAuras.InvertSort(comparator)
   * takes as argument a single comparator, and returns a new comparator which has precisely the opposite behavior. Specifically, the new comparator is true exactly when the old one is false, false when it is true, and nil when it is nil.
* WeakAuras.SortNilFirst
   * A builtin comparator which stably moves nil values first. Returns nil if and only if both parameters are not nil. For this reason, SortNilFirst is useful to place first in a sort composition, in order to guarantee that lower priority comparators receive well-formed data.
* WeakAuras.SortNilLast
   * Inverted version of WeakAuras.SortNilFirst.
* WeakAuras.SortGreaterLast
   * A builtin comparator which is effectively the "<" operator.
* WeakAuras.SortGreaterFirst
   * Inverted Version of WeakAuras.SortGreaterLast
* WeakAuras.SortAscending(path)
   * Alias for WeakAuras.SortRegionData(path, WeakAuras.ComposeSorts(WeakAuras.SortNilFirst, WeakAuras.SortGreaterLast))
* WeakAuras.SortDescending(path)
   * Inverted Version of WeakAuras.SortAscending(path).
Here are a few examples:
sort by stacks, descending
WeakAuras.SortDescending {"region", "state", "stacks"}
sort by stacks ascending, then by expiration descending
WeakAuras.ComposeSorts(
  WeakAuras.SortAscending{"region", "state", "stacks"},
  WeakAuras.SortDescending{"region", "state", "expirationTime"}
)
sort by stacks descending, but put “0” stacks at the top
WeakAuras.SortRegionData(
  {"region", "state", "stacks"},
  WeakAuras.ComposeSorts(
    WeakAuras.SortNilFirst,
    function(a, b)
      if a ~= 0 and b ~= 0 then
        -- both belong in the "nonzero" section, return nil to let next comparator run
        return nil
      elseif a == 0 then
        -- a belongs in the "zero" section and is already fist, so don't swap to avoid creating an unstable sort
        return false
      else
        -- b == 0 and a ~= 0, a swap is needed
        return true
      end
    end,
    WeakAuras.SortGreaterFirst
  )
)
Custom Grow
Custom Grow is slightly more involved, but still straightforward. You are given 2 parameters. The first is an empty table which is expected to be filled with positioning data, and the second's is a table containing the regionData of all active children, in sorted order (note that positioning always occurs after sorting). You are not expected to return anything, and anything you do return from this function are ignored.
function(newPositions, activeRegions)
    -- this function will produce a parabola shape
    local mid = #activeRegions / 2
    for i = 1, #activeRegions do
        newPositions[i] = {
            40 * (i - mid),
            0.5 * (i - mid)^2
        }
    end
end
If a child is not given any position data, then it is hidden, and moved to position 0, 0. You may hide a child at a particular spot other than 0, 0 (useful if you use the animated expand/collapse option) by setting the third value in the position data to false.
Since WeakAuras 2.14 Custom Grow function can also be used to group and anchor children per frame
function(newPositions, activeRegions)
    -- make a list of regionData for each frame
    local frames = {}
    for _, regionData in ipairs(activeRegions) do
        local unit = regionData.region.state and regionData.region.state.unit
        if unit then
            local frame = C_NamePlate.GetNamePlateForUnit(unit)
            if frame then
                frames[frame] = frames[frame] or {}
                tinsert(frames[frame], regionData)
            end
        end
    end
    for frame, regionsData in pairs(frames) do
        local totalWidth = #regionsData - 1
        for _, regionData in ipairs(regionsData) do
            totalWidth = totalWidth + (regionData.data.width or regionData.region.width)
        end
        local x, y = - totalWidth/2, - (#regionsData - 1)/2
        newPositions[frame] = {}
        for i, regionData in ipairs(regionsData) do
            x = x + (regionData.data.width or regionData.region.width) / 2
            newPositions[frame][regionData] = { x, y }
            x = x + (regionData.data.width or regionData.region.width) / 2
        end
    end
end
Lazy Evaluation
With WeakAuras 5.3.6 as a measure to improve performance, dynamic groups are now required to declare which parts of state they depend on to function correctly. You will see this as a new input box above a custom grow/sort codebox, labeled "Run On...". Write into this box a comma-separated list of every state key your custom layout consumes.
For example, if you have a custom sort like this:
WeakAuras.SortAscending{"region", "state", "myKey"}
then you should add myKey to the "Run On..." box in order to guarantee your sorting continues to function correctly. As an escape hatch, the special key changed acts as a wildcard and causes WeakAuras to always trigger your custom sort & grow functions. We recommend you avoid this if possible, however, since it eliminates any opportunity for WeakAuras to optimize its performance.
Group by Frame
The Group by Frame option use pre-built growers functions to group and anchor regions to frames. Nameplates to nameplates found from state.unit. Unit Frames to unit frames found from state.unit. Custom Frames give you control over which frame each region should be anchored to.
function(frames, activeRegions)
    for _, regionData in ipairs(activeRegions) do
        local unit = regionData.region.state and regionData.region.state.destUnit
        if unit then
            local frame = C_NamePlate.GetNamePlateForUnit(unit)
            if frame then
                frames[frame] = frames[frame] or {}
                tinsert(frames[frame], regionData)
            end
        end
    end
end
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Custom Dynamic Group · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Custom Anchor
Buds edited this page Aug 26, 2019 · 3 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
Custom Anchor Function
The custom anchor function is updated on trigger update and should return a frame.
This example paired with a "cast" trigger with unit = "player" will anchor the region to your target's nameplate
function()
    if aura_env.state.destUnit then
        return C_NamePlate.GetNamePlateForUnit(aura_env.state.destUnit)
    end
end
For dynamically anchoring multiple auras to multiple frames, refer to dynamic group Custom Grow Functions and Group by Frame
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Custom Anchor · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Custom Animation Functions
InfusOnWoW edited this page Jul 5, 2016 · 3 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
Custom Animation Functions
Custom animation functions are an advanced feature that is only intended for users who know Lua. As such, the following page will assume you are familiar with Lua and related programming concepts. For more information on Lua, see Programming In Lua.
________________


WeakAuras allows the user to define custom "paths" for all animation types. For Translation animations, the term "path" is literal; the custom path actually defines what x and y coordinates the display will take. For other animation types, the term "path" simply refers to the manner in which the display's original value is combined with the value specified by the animation to determine a final value, for whatever aspect of the display the animation is meant to alter.
WeakAuras' animation system is based on 5 distinct types of animation: Alpha, Translation, Scale, Rotate, and Color. Every display type supports Alpha, Translation and Color animations. Some display types do not support Scale animations (mostly because it is not possible to cleanly apply Scale animations to text). Only Textures support Rotate animations.
To define a custom animation function in WeakAuras, you must first change the animation's Type to "Custom Function". This will provide a multi-line editbox in which the Custom Function can be written. The custom function should be an anonymous function. It will be called every frame during the animation to determine what value should be applied to the display. The arguments passed to the function, and values which should be returned by the function, vary by animation type.
________________


Alpha
Alpha animations denote a change in transparency.
Alpha animations provide 3 arguments:
* arg1 - progress: A value between 0 and 1 which represents how far along the animation is. Main and Finish animations start at 0 and end at 1, while Start animations start at 1 and end at 0.
* arg2 - start: The Alpha value that is defined as "normal" for the display, expressed as a value between 0 (invisible) and 1 (completely opaque). This would be set in the Display tab.
* arg3 - delta: The difference between the "normal" alpha of the display and the alpha value specified for the animation (using the slider right below the Custom Function box). For example, if a display is set to 100% alpha normally, and its Alpha animation is set to 33%, then "delta" would be -0.66.
An Alpha animation function should return a single value:
* return1 - alpha: The alpha value that the display should have at the current point in the animation.
The "Normal" Alpha animation path, which simply transitions from one Alpha value to another in a linear fashion, looks like this:
function(progress, start, delta)
  return start + (progress * delta)
end
________________


Translate
Translate animations denote a change in position. Note that a display's x and y coordinates are defined in terms of the distance between its reference anchor point and its self anchor point, both of which can be set in the Display tab. In WoW, x coordinates go from 0 at the left side of the screen to a positive value at the right side of the screen, and y coordinates go from 0 at the bottom of the screen to a positive value at the top of the screen. This is vertically inverse compared to many coordinate systems used in programming.
Translate animations provide 5 arguments:
* arg1 - progress: A value between 0 and 1 which represents how far along the animation is. Main and Finish animations start at 0 and end at 1, while Start animations start at 1 and end at 0.
* arg2 - startX: The x coordinate that is defined as "normal" for the display (specifically, the x coordinate of its anchor point), expressed in pixels. This would be set in the Display tab.
* arg3 - startY: The y coordinate that is defined as "normal" for the display (specifically, the y coordinate of its anchor point), expressed in pixels. This would be set in the Display tab.
* arg4 - deltaX: The value specified by the animation using the "X Offset" slider underneath the Custom Function box.
* arg5 - deltaY: The value specified by the animation using the "Y Offset" slider underneath the Custom Function box.
A Translate animation function should return two values:
* return1 - x: The resulting x coordinate of the display.
* return2 - y: The resulting y coordinate of the display.
The "Normal" Translate animation path, which simply transitions from one position to another in a straight line, looks like this:
function(progress, startX, startY, deltaX, deltaY)
  return startX + (progress * deltaX), startY + (progress * deltaY)
end
________________


Scale
Scale animations denote a change in size. A display's scale in either the x or y direction is defined in relation to its normal size. This means that a display that is normally 200x200 pixels, if under a Scale animation whose current values are 1.5 and 0.8, will be 300x160 pixels.
Scale animations provide 5 arguments:
* arg1 - progress: A value between 0 and 1 which represents how far along the animation is. Main and Finish animations start at 0 and end at 1, while Start animations start at 1 and end at 0.
* arg2 - startX: The "normal" scale of the display in the x direction. This is always 1.
* arg3 - startY: The "normal" scale of the display in the y direction. This is always 1.
* arg4 - scaleX: The value specified by the animation using the "X Scale" slider underneath the Custom Function box.
* arg5 - scaleY: The value specified by the animation using the "Y Scale" slider underneath the Custom Function box.
A Scale animation function should return two values:
* return1 - scaleX: The resulting scale of the display in the x direction.
* return2 - y: The resulting scale of the display in the y direction.
The "Normal" Scale animation path, which simply scales from one size to another in a linear fashion, looks like this:
function(progress, startX, startY, scaleX, scaleY)
  return startX + (progress * (scaleX - startX)),
          startY + (progress * (scaleY - startY))
end
Note that the scaleX and scaleY values passed to the Scale function are interpreted as being absolute values which denote the eventual maximum scale of the animation, not the difference between the original scale (which is always 1x1) and the end scale. This is a different behavior than the rest of the animation types.
Also note that Scale animations will differ slightly based on the display's anchor point, which will not change positions. A display anchored by its center will scale from the center, whereas a display anchored by a corner will scale from that corner.
________________


Rotate
Rotate animations denote a change in rotation. Texture displays are the only display type that is able to rotate (and only if Allow Full Rotation is enabled).
Rotate animations provide 3 arguments:
* arg1 - progress: A value between 0 and 1 which represents how far along the animation is. Main and Finish animations start at 0 and end at 1, while Start animations start at 1 and end at 0.
* arg2 - start: The Rotation value that is defined as "normal" for the display, expressed in degrees. This would be set in the Display tab.
* arg3 - delta: The rotation value specified for the animation, using the slider right below the Custom Function box.
A Rotate animation function should return a single value:
* return1 - rotation: The rotation value that the display should have at the current point in the animation.
The "Normal" Rotate animation path, which simply transitions from one Rotation value to another in a linear fashion, looks like this:
function(progress, start, delta)
  return start + (progress * delta)
end
Color
Color animations denote a change in color.
Color animations provide 9 arguments:
* arg1 - progress: A value between 0 and 1 which represents how far along the animation is. Main and Finish animations start at 0 and end at 1, while Start animations start at 1 and end at 0.
* arg2, arg3, arg4, arg5 - r1 g1 b1 a1: The Color value that is defined as "normal" for the display. This would be set in the Display tab.
* arg6, arg7, arg8, arg9 - r2 g2 b2 a2: The color value specified for the animation, using the color selector below the Custom Function box.
A Color animation function should return a 4 values:
* return1, return2, return3, return4 - r g b a: The color values that the display should have at the current point in the animation.
The "Color" animation path, which simply transitions from one Color value to another in a linear fashion, looks like this:
function(progress, r1, g1, b1, a1, r2, g2, b2, a2)
      return r1 + (progress * (r2 - r1)), g1 + (progress * (g2 - g1)), b1 + (progress * (b2 - b1)), a1 + (progress * (a2 - a1))
    end
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Custom Animation Functions · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Custom Actions
nullKomplex edited this page Nov 25, 2019 · 5 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
Custom Actions
The Custom Code section of the Actions tab can be used to execute custom Lua commands whenever a display is shown or hidden.
For a list of all commands that interact with the WoW client, see the WoW API. Note that some actions, like moving or casting spells, cannot be executed by Lua code.
For more information on Lua syntax, see Programming in Lua.
The aura's On Show Custom Code can be used to announce the name of the person on whom Beacon of Light is cast to your raid, with the following code:
local name = GetUnitName(aura_env.state.name)
SendChatMessage("Beacon of Light on "..name, "RAID")
The above snippet is possible without the use of Custom Code. It is recommended to use built-in WeakAura functionality where possible.
Each custom action (On Init, On Show, On Hide) does not require a function to be used.
For more information about aura_env see here.
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
* Terms
* Privacy
* Security
* Status
* Docs
* Contact GitHub
* Pricing
* API
* Training
* Blog
* About
Custom Actions · WeakAuras/WeakAuras2 Wiki · GitHub




































* 















* 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security


Skip to content
* * * * * * * * * * * * * *    *    *    *    *    * * * Pricing
Sign in
Sign up
WeakAuras / WeakAuras2 Public
* * * Insights
Trigger State Updater (TSU)
InfusOnWoW edited this page Oct 8, 2023 · 76 revisions
Pages 26
Main Pages
* Home
* API Documentation
* Getting Involved
* Setting up a Lua Dev Environment
* Deprecations
* Useful Snippets
Basics
* Aura Types
* Trigger Types
* Triggers and Untriggers
* Aura Activation
* Dynamic Information
* Text Replacements
Custom Code
* Custom Options
* Custom Triggers
* aura_env
* Useful Variables and Functions within WeakAuras
* Custom Dynamic Group Functions
* Custom Anchor Function
* Custom Animation Functions
* Custom Actions
* Trigger State Updater (TSU)
Related
* Live Help (Discord server)
Clone this wiki locally
* Introduction
* Video Tutorials
* The "allstates" table
* States and Settings
   * Progress information
   * Overlays
   * Tooltips
   * Units and Anchoring
   * Custom fields
* Example Trigger Function
   * return, show, changed
* Custom Variables
   * Overlays
   * Conditions
      * Standard Conditions:
      * Custom Conditions:
      * Complex Custom Conditions:
   * Custom Variables Conclusion :
* State Table Keys
* "aura_env.state"
* State Fields and Text Output
* A very important note about making changes to clone regions
* TSU - Frequently asked questions and some frequently made mistakes
Introduction
At its core the Trigger State Updater custom trigger type (referred to as "TSU") provides a way to create "clones". That is many separate regions with their own separate Dynamic Info from a single trigger. If you're familiar with event type triggers or aura triggers that provide the "auto-clone" option then you'll understand the concept. The clones will all take their general settings from the Aura's main settings so positioning them will usually require a Dynamic Group or some potentially intricate coding. Likewise all other settings will be shared across all clones; the colour set in the Display tab, the text settings, sizing and so on, unless you specifically use Conditions or Animations to alter them. All TSU triggers are effectively "Status" type triggers, and will receive the dummy events just as normal Status triggers do.
Video Tutorials
A few video tutorials have been made over the last few expansions. While they don't always include features that have been added since then, everything in them is still relevant and useful info.
Pre-Legion:
* Short version by Hamsda - https://youtu.be/2_eioP-ecDc
* Long version by Krazyito - https://youtu.be/Vwb10DG51aU
Late-Legion:
* Long version by Asakawa - https://youtu.be/P_kCDo5aefQ
* Even longer version by Asakawa - https://youtu.be/ir0xP4kXvAI
BFA:
* Specific tutorial on TSU's "Custom Variables" by Asakawa - https://youtu.be/O0lNW2vxwGA
The "allstates" table
So how do you make a new State/Clone? When you make a new trigger with the Trigger State Updater type, WeakAuras will send the allstates table into that function as the first arg (followed by the event name and the event's own args, as normal). You make a new State by adding a subTable to allstates containing some specific settings, then returning true from the function.
A good way to conceptualise TSU is to think of the allstates table as the way that you can communicate with the WA addon and tell it what clones you want it to make, change, or remove. And to think of a separation between "states" and "clones". The WA addon reads the table of "states" that you give it and creates "clones" based on them. But, for instance, you can't simply change a "state" you previously made to nil and expect the associated "clone" to be removed. You need to change the state.show = false and let WA remove the clone. WA will also then remove the state table for you at that point. (Also, see below for relevant info on the importance of using changed)
States and Settings
When creating your state subTable in allstates the following settings can be used:
* changed = boolean: Informs WeakAuras that the states values have changed. Always set this to true for states that were changed.
* show = boolean: Controls whether the display is visible. Note, that states that have show set to false are automatically removed.
* name = string: The name, returned by %n
* icon = number or string: IconID or TexturePath, used in icons and progress bars
* texture = number or string: IconID or TexturePath, used in textures
* stacks = number: The stack count, returned by %s
* index = number or string: Sets the order the output will display in a dynamic group (if sorting is set to "none" on the group). Strings or numbers are fine but DO NOT MIX TYPES!
Progress information
can be set by either setting progressType to "static" or "timed":
* progressType = "timed"
   * expirationTime = number: relative to GetTime()
   * duration = number: total duration of the bar in seconds
      * For example, a simple 5 second timer would use duration = 5 and expirationTime = GetTime() + 5
* progressType = "static"
   * value = number
   * total = number
Other "progress" related fields:
* autoHide = boolean: Set to true to make the display automatically hide at the end of the "timed" progress. autoHide can also be used along with the "static" progressType by defining a duration and expirationTime along with the static value and total. While the static values will be displayed, the timed values will set the Hide time for the clone.
* paused = boolean: Set to true (and set a remaining value) to pause a "timed" progress. Set to false (and recalculate the expirationTime value) to resume.
* remaining = number: Only used with paused, gives WA the info needed to show paused progress at the current point.
   * A quick example of using paused: https://wago.io/TSU-paused-example
Overlays
can be added to TSU bars.
* additionalProgress = table: This is a more complex field than the others but allows you to create "Overlays" on bars that you make using TSU.
   * The additionalProgress table can have as many index-keyed subTables as you like. Each of those subTables contains the positional info for that overlay.
      * min = number
      * max = number
 OR
      * direction = string
      * width = number`
      * offset = number`
min and max go together as a pair. Their values should be relative to the main bar's total/duration. They define the left and right point of the overlay on the bar.
direction and width go together as a pair and define the position of the Overlay relative to the moving edge of the bar. direction should be either "forward" or "backward", dictating whether the Overlay will go ahead or behind the moving edge. width is a number relative to the total/duration.
offset is optional but can only be used with direction and width and is a simple offset from the bar's moving edge.
See the example below for how these would be used in an actual trigger
Tooltips
TSU triggers have the "Tooltip on Mouseover" option available by default in the Display tab. However you need to provide specific information in the state in order for the tooltip you want to show. With that option ticked you need to use:
   * spellId = number: To show a spell's tooltip
   * itemId = number : To show an item's tooltip
   * link = string : To show the tooltip of anything that can be put in a link. Useful, of course, for showing specific items (rather than generic ones from itemId) but also can show spells, achievements, quests, etc.
   * unit = string : a valid unitID
   * unitBuffIndex = number : To show the tooltip for a specific buff on the specified unit.
   * unitBuffFilter = string : (Optional) To filter the buff in accordance with UnitBuff
   * unitDebuffIndex = number : To show the tooltip for a specific debuff on the specified unit.
   * unitDebuffFilter = string : (Optional) To filter the debuff in accordance with UnitDebuff
   * unitAuraIndex = number : To show the tooltip for a specific aura on the specified unit.
   * unitAuraFilter = string : (Optional) To filter the aura in accordance with UnitAura
   * tooltip = string : A string to be displayed. Escape sequence formatting can be used as needed.
   * tooltipWrap = bool : true to make the text on the tooltip wrap to new lines, false or nil to let it make the tooltip as wide as needed to fite the text given.
A spellId or itemId is enough to show the tooltip for those spells/items. To show a buff/debuff both the unit and the index must be given. The buff/debuff "index" is not the spellID of the buff but the index!
Units and Anchoring
   * unit = string: A valid UnitID.
WA has a few ways in which clone states can be directly associated with units in the UI, their Nameplates and UnitFrames. These can be found in the Display tab's Anchor To setting, a Dynamic Group's "Group By" setting, as well as options for setting External Glows in Conditions and Actions. To enable these settings your state must carry a valid UnitID.
Custom fields
The only other thing to mention in the state settings is that you can add your own fields to the state. These won't be processed by WeakAuras or have any effect in themselves but it attaches some info to that state that you can use in various ways.
   * customField = value
Example Trigger Function
This simple example aims to make a cast bar for any group members that cast a specific spell. It would use custom - event - COMBAT_LOG_EVENT_UNFILTERED:SPELL_CAST_START for the trigger settings and the following in the trigger:
function(allstates, event, _, subEvent, _, _, sourceName, _, _, _, _, _, _, spellID)
    if subEvent == "SPELL_CAST_START"
    and UnitExists(sourceName) 
    and spellID == 123456 
    -- Is the combat log event one we care about?
    -- UnitExists(sourceName) is a quick way to see if the caster is in our group 
    --     since unit names are also unitIDs for group members.
    then
        local name, _, icon, startMS, endMS = UnitCastingInfo(sourceName)
        -- We gather the info we need
        if name then -- quick nil check
            -- calculate the duration info we'll need
            local duration = (endMS - startMS) / 1000
            local expiration = endMS / 1000
            -- and this is the TSU bit! 
            -- We're making a new subTable in `allstates` using the sourceName as the table key.
            allstates[sourceName] = {
                show = true,
                changed = true,
                progressType = "timed",
                duration = duration,
                expirationTime = expiration,
                name = name,
                icon = icon,
                caster = sourceName,
                autoHide = true,
                additionalProgress = {
                    {
                        min = 0,
                        max = 0.5,
                    },
                    {
                        direction = "forward",
                        width = 2,
                        offset = duration/3
                    },
                }
            }
            return true
            -- and once we return true, WA will process the additions to `allstates` and create the new clone. 
        end
    end
end
return, show, changed
The returned value from a TSU trigger does not affect the Activation state of the trigger, the trigger will be activated as long as any of its states are set to show = true. So all the return value does is tell WeakAuras to check the states for updates (changed = true). As such, common mistakes are setting updates to the states' info but not returning true to tell WeakAuras to show that updated info, or making changes, returning true, but not setting changed = true on the states that need updating.
Custom Variables
A code block is available below the trigger function on a TSU trigger and this allows us to define State fields for use in the Conditions tab. It is also used to specify whether the trigger will be using any Overlays, enabling colour-pickers for the Overlays in the Display tab.
The code block doesn't expect a function like most code blocks in WA. All we're doing is defining a table, so the info you give it will be enclosed inside { } and the various settings we create are members of that table.
Overlays
additionalProgress = number : This number sets how many Colour-pickers should be added to the Display tab and should, of course, be set to the maximum number of "additionalProgress" tables you will be using in your trigger.
Conditions
Conditions can be set in slightly different ways depending on the complexity required.
Standard Conditions:
If you want to include "standard" conditions from your TSU clones then you can simple declare them to be true. All the default Conditions available to use in this way are:
{
    expirationTime = true,
    duration = true,
    value = true,
    total = true,
    stacks = true,
}
Custom Conditions:
To include your own custom state fields in the Conditions settings you need to tell WA the type of variable that field represents. The options are:
   * "bool" - Provides a dropdown with true or false
   * "string" - Provides a dropdown for "Is Exactly", "Contains", and "Matches (pattern)", along with a text box to enter a string to compare to.
   * "number" - Provides a dropdown with comparators (<, >=, etc.) along with a box to enter a numbers to compare to.
   * "timer" - Provides the same controls as "number" but compares against the remaining duration on that given timer. The value used for this kind of condition needs to be relative to the value of GetTime()
Example:
{
    var1 = "bool",
    var2 = "number",
}
Complex Custom Conditions:
Instead of simply setting the type of variable you can use a sub-table. This table can be used to set a specific display name for the Condition, and access the "select" Condition type. The "select" type lets you define a series of optional values which will appear as a dropdown selection. These should be defined in a further sub-table with each table Key being the value set on the State and the table Value being what should be visible to users in Conditions.
var1 = {
    display = "my var name",
    type = "string"
}
var2 = {
    display = "var2",
    type = "select",
    values = {
        ["y"] = "yes", 
        ["n"] = "no", 
        ["m"] = "maybe"
    }
}
All the above methods allow you create a Condition that simply compares against a single value that exists on the State. Complex Custom Conditions can also allow the user provide a custom function to decide the Condition's state. This function, called test, is sent the State table of the State to be evaluated followed by the "needle" value(s) (that is value(s) chosen by users in the Conditions tab), and evaluates the resulting Condition's outcome using code.
A simple example:
isMoving = {
    display = "Player moving",
    type = "bool",
    test = function(state, needle)
        return IsPlayerMoving() == (needle == 1)
    end,
    events = {
        "PLAYER_STARTED_MOVING", "PLAYER_STOPPED_MOVING" 
    },
}
So you can see that we're defining a function in the table, which must be called test, that simply checks the API function IsPlayerMoving() and compares it to the "needle" provided by the selection made in the Conditions tab.
A note on the "needle": Remember that a "bool" type Condition is a dropdown selection so the values selected there provide 0 or 1, not false or true (or even "false" or "true") as might be intuitive. Also note that depending on the type of Condition being used there may be more than one needle value sent in. For example if you set a "number" type Condition then there will be two needle args sent in to the function, a value and a comparison (e.g. 3 and ">="). Be sure to catch all needle args.
We're also providing an events variable, an array containing any game events on which this Condition will be assessed. This is only necessary if your trigger is not handling all the events needed to update the Condition. All Conditions are evaluated when the trigger returns true so in this example case if our trigger were handling those "MOVING" events then specifying them wouldn't be necessary.
This is, of course, a very simple example but you have access to all the State table's values along with the whole API so the possibilities are almost endless.
I think it is worth mentioning however, that everything that can be done with Custom Tests can be done in the trigger and carried through to Conditions via a simple Custom Condition. If we take the "Player moving" example above, you could add the necessary events to your trigger, use them to iterate existing states and update a simple variable like state.moving = true which could then be defined for use in Conditions. The method used can come down to just what you find easiest or most intuitive.
Custom Variables Conclusion :
All these approaches to settings can be mixed and matched as you need.
A Full Example:
{
    additionalProgress = 1,
    
    expirationTime = true,
    stacks = true,
    
    unit = "string",
    
    var3 = {
        display = "colour",
        type = "select",
        values = {
            [1] = "red",
            [2] = "blue",
            [3] = "green",
        }
    },


    spellUsable = {
        display = "Spell Usable",
        type = "bool",
        test = function(state, needle)
            return state and state.show and (IsUsableSpell(state.spellname) == (needle == 1))
        end,
        events = {
            "SPELL_UPDATE_USABLE",
            "PLAYER_TARGET_CHANGED",
            "UNIT_POWER_FREQUENT",
        },
    },
}
________________


State Table Keys
Controlling the table key you use when you create a state gives control over how States are altered, overwritten, or when more clones are made.
Overwriting an existing state table with new info will change that existing state. If you always used allstates["state"] as your only key then you would never make more clones, and will always overwrite the first. If you used allstates[#allstates+1] then you'd always make new clones. However if you know which clones you will want to show and when, then overwriting is actually useful.
Say, using the above example function, you wanted to track casts of 3 given spellIDs, but only ever wanted to show the most recent use of each of the spells no matter who cast it. You could use the spellID as the State key and the overwriting will handle itself.
"aura_env.state"
All the info that is put into a state in the trigger function is also passed into the various custom code functions around the Aura (e.g. Animations, Custom Text, On Show/Hide, etc.). You can access this info using the aura_env.state variable.
Animations example: If we had also added a field to our state called colour and we set that to be either "Red", "Green", or "Blue" then we could access that info in an animation function and use it to alter the colour of that specific clone.
function()
    if not aura_env.state then return 0, 0, 0, 1 end  -- error checking.
    if aura_env.state.colour == "Green" then
        return 0, 1, 0, 1 -- Reminder: return R, G, B, Alpha (using numbers between 0 and 1)
    elseif aura_env.state.colour == "Red" then
        return 1, 0, 0, 1
    elseif aura_env.state.colour == "Blue" then
        return 0, 0, 1, 1
    else
        return 1, 1, 1, 1
    end 
end
Each variable that you save in the state can be accessed like this and will run these scripts for each state. Imagine that instead of a simple string "Red" you instead sent a small table of RGB values. colour = {1,0.25,0}. Then your animation function can simply output the RGB values from that table. The possibilities that are opened up with custom fields are great.
State Fields and Text Output
Also worth noting that all field in the State can be outputted in text directly using %fieldName. In the full Trigger function example above the custom field "caster" is added to the State. Without needing any custom text function the value of that field, the caster's name, can be outputted, using %caster
A very important note about making changes to clone regions
In WoW's UI, frames once created, can not be destroyed and a UI reload is the only thing that will reset all the frames that have been made. As such, any well-made addon that creates frames programmatically will use some method (usually a "pool") to reuse old frames and prevent infinite creation of more and more. WeakAuras uses this method for its clone regions. When a trigger needs to make a new clone it first checks if any old ones are in the pool, available for reuse, before creating an additional one.
Now, with all of that in mind, how does this impact using TSUs?
Any change you make to a clone region that isn't automatically reset by WeakAuras when the clone returns to the clone pool will continue to affect other Auras that use pull from that pool. For example, if you're making a progress bar TSU and you want a central text you might be tempted to add an additional fronString frame (as is the recommendation when not using clones). However, WeakAuras does not know that this has been added to the clone region and so next time the region is used there will be an extra text in the middle, stuck showing whatever text it was last given.
Other common examples of similar mistakes are using SetScript to make the regions clickable, adding "tick" textures, and using SetPoint to re-anchor.
The temptation might be to just use On Hide to undo anything you did, however On Hide is not run in all circumstances, such as when opening WA config. The recommendation really is to just avoid making changes to the region that could "pollute" the pool. For anchoring the solution is to avoid SetPoint but instead use region:SetAnchor(point, frame, framePoint) and region:SetOffset(x, y).
TSU - Frequently asked questions and some frequently made mistakes
Q: How do I clear out all current clones?
To remove existing states you can't simply clear the allstates table. You need to tell WA to update those states, even just to clear them. The snippet below achieves that:
for _, state in pairs(allstates) do
    state.show = false;
    state.changed = true;
end
Q: If I use multiple TSU triggers in an Aura do they share an allstates table?
No. All TSU triggers have separate tables.
A good way to think of States is that they're the "Dynamic Info" (see this wiki page if you're not confident about that) of that specific trigger. So just as with normal triggers, if you change where the Dynamic Info is coming from, from one trigger to another and the Aura's output changes. With TSU triggers, however, instead of the Aura just updating to show different info, the trigger's clones are displayed.
If you feel like you want access to one trigger's allstates table from inside another trigger then you're probably handling events in different triggers and perhaps you haven't noticed that you can handle as many events as you want in the main trigger.
WeakAuras Wiki | We ♥ The WeakAuras Community
Footer
© 2023 GitHub, Inc.
Footer navigation
   * Terms
   * Privacy
   * Security
   * Status
   * Docs
   * Contact GitHub
   * Pricing
   * API
   * Training
   * Blog
   * About
Trigger State Updater (TSU) · WeakAuras/WeakAuras2 Wiki · GitHub




































   * 















   * 







Code


Issues 51


Pull requests 5


Actions


Projects


Wiki


Security